ARM GAS  /tmp/ccTzMmp3.s 			page 1


   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"OLED.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.OLED_I2C_Init,"ax",%progbits
  16              		.align	1
  17              		.global	OLED_I2C_Init
  18              		.arch armv7-m
  19              		.syntax unified
  20              		.thumb
  21              		.thumb_func
  22              		.fpu softvfp
  24              	OLED_I2C_Init:
  25              	.LFB65:
  26              		.file 1 "Core/Src/OLED.c"
   1:Core/Src/OLED.c **** /* USER CODE BEGIN Header */
   2:Core/Src/OLED.c **** /**
   3:Core/Src/OLED.c ****   ******************************************************************************
   4:Core/Src/OLED.c ****   * @file    OLED.c
   5:Core/Src/OLED.c ****   * @brief   This file provides code for the configuration
   6:Core/Src/OLED.c ****   *          of all used GPIO pins.
   7:Core/Src/OLED.c ****   ******************************************************************************
   8:Core/Src/OLED.c ****   * @attention
   9:Core/Src/OLED.c ****   *
  10:Core/Src/OLED.c ****   * Copyright (c) 2024 STMicroelectronics.
  11:Core/Src/OLED.c ****   * All rights reserved.
  12:Core/Src/OLED.c ****   *
  13:Core/Src/OLED.c ****   * This software is licensed under terms that can be found in the LICENSE file
  14:Core/Src/OLED.c ****   * in the root directory of this software component.
  15:Core/Src/OLED.c ****   * If no LICENSE file comes with this software, it is provided AS-IS.
  16:Core/Src/OLED.c ****   *
  17:Core/Src/OLED.c ****   ******************************************************************************
  18:Core/Src/OLED.c ****   */
  19:Core/Src/OLED.c **** /* USER CODE END Header */
  20:Core/Src/OLED.c **** 
  21:Core/Src/OLED.c **** /* Includes ------------------------------------------------------------------*/
  22:Core/Src/OLED.c **** #include "OLED.h"
  23:Core/Src/OLED.c **** #include"OLED_Font.h"
  24:Core/Src/OLED.c **** 
  25:Core/Src/OLED.c **** /* USER CODE BEGIN 0 */
  26:Core/Src/OLED.c **** // 引脚配置
  27:Core/Src/OLED.c **** #define OLED_W_SCL(x)   HAL_GPIO_WritePin(OLED_GPIO_Port,OLED_W_SCL_Pin,(GPIO_PinState)(x))
  28:Core/Src/OLED.c **** #define OLED_W_SDA(x)   HAL_GPIO_WritePin(OLED_GPIO_Port,OLED_W_SDA_Pin,(GPIO_PinState)(x))
  29:Core/Src/OLED.c **** 
  30:Core/Src/OLED.c **** /* USER CODE END 0 */
  31:Core/Src/OLED.c **** 
  32:Core/Src/OLED.c **** /*----------------------------------------------------------------------------*/
ARM GAS  /tmp/ccTzMmp3.s 			page 2


  33:Core/Src/OLED.c **** /* Configure GPIO                                                             */
  34:Core/Src/OLED.c **** /*----------------------------------------------------------------------------*/
  35:Core/Src/OLED.c **** /* USER CODE BEGIN 1 */
  36:Core/Src/OLED.c **** 
  37:Core/Src/OLED.c **** /* USER CODE END 1 */
  38:Core/Src/OLED.c **** 
  39:Core/Src/OLED.c **** /** Configure pins as
  40:Core/Src/OLED.c ****         * Analog
  41:Core/Src/OLED.c ****         * Input
  42:Core/Src/OLED.c ****         * Output
  43:Core/Src/OLED.c ****         * EVENT_OUT
  44:Core/Src/OLED.c ****         * EXTI
  45:Core/Src/OLED.c **** */
  46:Core/Src/OLED.c **** 
  47:Core/Src/OLED.c **** //引脚初始化
  48:Core/Src/OLED.c **** void OLED_I2C_Init(void)
  49:Core/Src/OLED.c **** {
  27              		.loc 1 49 1 view -0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 24
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31 0000 F0B5     		push	{r4, r5, r6, r7, lr}
  32              	.LCFI0:
  33              		.cfi_def_cfa_offset 20
  34              		.cfi_offset 4, -20
  35              		.cfi_offset 5, -16
  36              		.cfi_offset 6, -12
  37              		.cfi_offset 7, -8
  38              		.cfi_offset 14, -4
  39 0002 87B0     		sub	sp, sp, #28
  40              	.LCFI1:
  41              		.cfi_def_cfa_offset 48
  50:Core/Src/OLED.c **** 
  51:Core/Src/OLED.c ****   GPIO_InitTypeDef GPIO_InitStruct = {0};
  42              		.loc 1 51 3 view .LVU1
  43              		.loc 1 51 20 is_stmt 0 view .LVU2
  44 0004 0023     		movs	r3, #0
  45 0006 0293     		str	r3, [sp, #8]
  46 0008 0393     		str	r3, [sp, #12]
  47 000a 0493     		str	r3, [sp, #16]
  48 000c 0593     		str	r3, [sp, #20]
  52:Core/Src/OLED.c **** 
  53:Core/Src/OLED.c ****   /* GPIO Ports Clock Enable */
  54:Core/Src/OLED.c ****   __HAL_RCC_GPIOA_CLK_ENABLE();
  49              		.loc 1 54 3 is_stmt 1 view .LVU3
  50              	.LBB2:
  51              		.loc 1 54 3 view .LVU4
  52              		.loc 1 54 3 view .LVU5
  53 000e 03F18043 		add	r3, r3, #1073741824
  54 0012 03F50433 		add	r3, r3, #135168
  55 0016 9A69     		ldr	r2, [r3, #24]
  56 0018 42F00402 		orr	r2, r2, #4
  57 001c 9A61     		str	r2, [r3, #24]
  58              		.loc 1 54 3 view .LVU6
  59 001e 9B69     		ldr	r3, [r3, #24]
  60 0020 03F00403 		and	r3, r3, #4
  61 0024 0193     		str	r3, [sp, #4]
ARM GAS  /tmp/ccTzMmp3.s 			page 3


  62              		.loc 1 54 3 view .LVU7
  63 0026 019B     		ldr	r3, [sp, #4]
  64              	.LBE2:
  65              		.loc 1 54 3 view .LVU8
  55:Core/Src/OLED.c **** 
  56:Core/Src/OLED.c ****   /*Configure GPIO pin Output Level */
  57:Core/Src/OLED.c ****   // HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
  58:Core/Src/OLED.c **** 
  59:Core/Src/OLED.c ****   
  60:Core/Src/OLED.c **** 
  61:Core/Src/OLED.c ****   /*Configure GPIO pin : PtPin */
  62:Core/Src/OLED.c ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  66              		.loc 1 62 3 view .LVU9
  67              		.loc 1 62 24 is_stmt 0 view .LVU10
  68 0028 0125     		movs	r5, #1
  69 002a 0395     		str	r5, [sp, #12]
  63:Core/Src/OLED.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
  70              		.loc 1 63 3 is_stmt 1 view .LVU11
  64:Core/Src/OLED.c ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  71              		.loc 1 64 3 view .LVU12
  72              		.loc 1 64 25 is_stmt 0 view .LVU13
  73 002c 0223     		movs	r3, #2
  74 002e 0593     		str	r3, [sp, #20]
  65:Core/Src/OLED.c ****   // HAL_GPIO_Init(LED0_GPIO_Port, &GPIO_InitStruct);
  66:Core/Src/OLED.c ****   GPIO_InitStruct.Pin=OLED_W_SCL_Pin;
  75              		.loc 1 66 3 is_stmt 1 view .LVU14
  76              		.loc 1 66 22 is_stmt 0 view .LVU15
  77 0030 4FF48077 		mov	r7, #256
  78 0034 0297     		str	r7, [sp, #8]
  67:Core/Src/OLED.c ****   HAL_GPIO_Init(OLED_GPIO_Port, &GPIO_InitStruct);
  79              		.loc 1 67 3 is_stmt 1 view .LVU16
  80 0036 0C4C     		ldr	r4, .L3
  81 0038 02A9     		add	r1, sp, #8
  82 003a 2046     		mov	r0, r4
  83 003c FFF7FEFF 		bl	HAL_GPIO_Init
  84              	.LVL0:
  68:Core/Src/OLED.c ****   GPIO_InitStruct.Pin=OLED_W_SDA_Pin;
  85              		.loc 1 68 3 view .LVU17
  86              		.loc 1 68 22 is_stmt 0 view .LVU18
  87 0040 4FF40076 		mov	r6, #512
  88 0044 0296     		str	r6, [sp, #8]
  69:Core/Src/OLED.c ****   HAL_GPIO_Init(OLED_GPIO_Port, &GPIO_InitStruct);
  89              		.loc 1 69 3 is_stmt 1 view .LVU19
  90 0046 02A9     		add	r1, sp, #8
  91 0048 2046     		mov	r0, r4
  92 004a FFF7FEFF 		bl	HAL_GPIO_Init
  93              	.LVL1:
  70:Core/Src/OLED.c **** 
  71:Core/Src/OLED.c ****   OLED_W_SCL(1);
  94              		.loc 1 71 3 view .LVU20
  95 004e 2A46     		mov	r2, r5
  96 0050 3946     		mov	r1, r7
  97 0052 2046     		mov	r0, r4
  98 0054 FFF7FEFF 		bl	HAL_GPIO_WritePin
  99              	.LVL2:
  72:Core/Src/OLED.c ****   OLED_W_SDA(1);
 100              		.loc 1 72 3 view .LVU21
ARM GAS  /tmp/ccTzMmp3.s 			page 4


 101 0058 2A46     		mov	r2, r5
 102 005a 3146     		mov	r1, r6
 103 005c 2046     		mov	r0, r4
 104 005e FFF7FEFF 		bl	HAL_GPIO_WritePin
 105              	.LVL3:
  73:Core/Src/OLED.c **** 
  74:Core/Src/OLED.c **** }
 106              		.loc 1 74 1 is_stmt 0 view .LVU22
 107 0062 07B0     		add	sp, sp, #28
 108              	.LCFI2:
 109              		.cfi_def_cfa_offset 20
 110              		@ sp needed
 111 0064 F0BD     		pop	{r4, r5, r6, r7, pc}
 112              	.L4:
 113 0066 00BF     		.align	2
 114              	.L3:
 115 0068 000C0140 		.word	1073810432
 116              		.cfi_endproc
 117              	.LFE65:
 119              		.section	.text.OLED_I2C_Start,"ax",%progbits
 120              		.align	1
 121              		.global	OLED_I2C_Start
 122              		.syntax unified
 123              		.thumb
 124              		.thumb_func
 125              		.fpu softvfp
 127              	OLED_I2C_Start:
 128              	.LFB66:
  75:Core/Src/OLED.c **** 
  76:Core/Src/OLED.c **** /* USER CODE BEGIN 2 */
  77:Core/Src/OLED.c **** /**
  78:Core/Src/OLED.c ****   * @brief  I2C开始
  79:Core/Src/OLED.c ****   * @param  无
  80:Core/Src/OLED.c ****   * @retval 无
  81:Core/Src/OLED.c ****   */
  82:Core/Src/OLED.c **** void OLED_I2C_Start(void)
  83:Core/Src/OLED.c **** {
 129              		.loc 1 83 1 is_stmt 1 view -0
 130              		.cfi_startproc
 131              		@ args = 0, pretend = 0, frame = 0
 132              		@ frame_needed = 0, uses_anonymous_args = 0
 133 0000 10B5     		push	{r4, lr}
 134              	.LCFI3:
 135              		.cfi_def_cfa_offset 8
 136              		.cfi_offset 4, -8
 137              		.cfi_offset 14, -4
  84:Core/Src/OLED.c **** 	OLED_W_SDA(1);
 138              		.loc 1 84 2 view .LVU24
 139 0002 0D4C     		ldr	r4, .L7
 140 0004 0122     		movs	r2, #1
 141 0006 4FF40071 		mov	r1, #512
 142 000a 2046     		mov	r0, r4
 143 000c FFF7FEFF 		bl	HAL_GPIO_WritePin
 144              	.LVL4:
  85:Core/Src/OLED.c **** 	OLED_W_SCL(1);
 145              		.loc 1 85 2 view .LVU25
 146 0010 0122     		movs	r2, #1
ARM GAS  /tmp/ccTzMmp3.s 			page 5


 147 0012 4FF48071 		mov	r1, #256
 148 0016 2046     		mov	r0, r4
 149 0018 FFF7FEFF 		bl	HAL_GPIO_WritePin
 150              	.LVL5:
  86:Core/Src/OLED.c **** 	OLED_W_SDA(0);
 151              		.loc 1 86 2 view .LVU26
 152 001c 0022     		movs	r2, #0
 153 001e 4FF40071 		mov	r1, #512
 154 0022 2046     		mov	r0, r4
 155 0024 FFF7FEFF 		bl	HAL_GPIO_WritePin
 156              	.LVL6:
  87:Core/Src/OLED.c **** 	OLED_W_SCL(0);
 157              		.loc 1 87 2 view .LVU27
 158 0028 0022     		movs	r2, #0
 159 002a 4FF48071 		mov	r1, #256
 160 002e 2046     		mov	r0, r4
 161 0030 FFF7FEFF 		bl	HAL_GPIO_WritePin
 162              	.LVL7:
  88:Core/Src/OLED.c **** }
 163              		.loc 1 88 1 is_stmt 0 view .LVU28
 164 0034 10BD     		pop	{r4, pc}
 165              	.L8:
 166 0036 00BF     		.align	2
 167              	.L7:
 168 0038 000C0140 		.word	1073810432
 169              		.cfi_endproc
 170              	.LFE66:
 172              		.section	.text.OLED_I2C_Stop,"ax",%progbits
 173              		.align	1
 174              		.global	OLED_I2C_Stop
 175              		.syntax unified
 176              		.thumb
 177              		.thumb_func
 178              		.fpu softvfp
 180              	OLED_I2C_Stop:
 181              	.LFB67:
  89:Core/Src/OLED.c **** 
  90:Core/Src/OLED.c **** /**
  91:Core/Src/OLED.c ****   * @brief  I2C停止
  92:Core/Src/OLED.c ****   * @param  无
  93:Core/Src/OLED.c ****   * @retval 无
  94:Core/Src/OLED.c ****   */
  95:Core/Src/OLED.c **** void OLED_I2C_Stop(void)
  96:Core/Src/OLED.c **** {
 182              		.loc 1 96 1 is_stmt 1 view -0
 183              		.cfi_startproc
 184              		@ args = 0, pretend = 0, frame = 0
 185              		@ frame_needed = 0, uses_anonymous_args = 0
 186 0000 10B5     		push	{r4, lr}
 187              	.LCFI4:
 188              		.cfi_def_cfa_offset 8
 189              		.cfi_offset 4, -8
 190              		.cfi_offset 14, -4
  97:Core/Src/OLED.c **** 	OLED_W_SDA(0);
 191              		.loc 1 97 2 view .LVU30
 192 0002 0A4C     		ldr	r4, .L11
 193 0004 0022     		movs	r2, #0
ARM GAS  /tmp/ccTzMmp3.s 			page 6


 194 0006 4FF40071 		mov	r1, #512
 195 000a 2046     		mov	r0, r4
 196 000c FFF7FEFF 		bl	HAL_GPIO_WritePin
 197              	.LVL8:
  98:Core/Src/OLED.c **** 	OLED_W_SCL(1);
 198              		.loc 1 98 2 view .LVU31
 199 0010 0122     		movs	r2, #1
 200 0012 4FF48071 		mov	r1, #256
 201 0016 2046     		mov	r0, r4
 202 0018 FFF7FEFF 		bl	HAL_GPIO_WritePin
 203              	.LVL9:
  99:Core/Src/OLED.c **** 	OLED_W_SDA(1);
 204              		.loc 1 99 2 view .LVU32
 205 001c 0122     		movs	r2, #1
 206 001e 4FF40071 		mov	r1, #512
 207 0022 2046     		mov	r0, r4
 208 0024 FFF7FEFF 		bl	HAL_GPIO_WritePin
 209              	.LVL10:
 100:Core/Src/OLED.c **** }
 210              		.loc 1 100 1 is_stmt 0 view .LVU33
 211 0028 10BD     		pop	{r4, pc}
 212              	.L12:
 213 002a 00BF     		.align	2
 214              	.L11:
 215 002c 000C0140 		.word	1073810432
 216              		.cfi_endproc
 217              	.LFE67:
 219              		.section	.text.OLED_I2C_SendByte,"ax",%progbits
 220              		.align	1
 221              		.global	OLED_I2C_SendByte
 222              		.syntax unified
 223              		.thumb
 224              		.thumb_func
 225              		.fpu softvfp
 227              	OLED_I2C_SendByte:
 228              	.LVL11:
 229              	.LFB68:
 101:Core/Src/OLED.c **** 
 102:Core/Src/OLED.c **** /**
 103:Core/Src/OLED.c ****   * @brief  I2C发送一个字节
 104:Core/Src/OLED.c ****   * @param  Byte 要发送的一个字节
 105:Core/Src/OLED.c ****   * @retval 无
 106:Core/Src/OLED.c ****   */
 107:Core/Src/OLED.c **** void OLED_I2C_SendByte(uint8_t Byte)
 108:Core/Src/OLED.c **** {
 230              		.loc 1 108 1 is_stmt 1 view -0
 231              		.cfi_startproc
 232              		@ args = 0, pretend = 0, frame = 0
 233              		@ frame_needed = 0, uses_anonymous_args = 0
 234              		.loc 1 108 1 is_stmt 0 view .LVU35
 235 0000 70B5     		push	{r4, r5, r6, lr}
 236              	.LCFI5:
 237              		.cfi_def_cfa_offset 16
 238              		.cfi_offset 4, -16
 239              		.cfi_offset 5, -12
 240              		.cfi_offset 6, -8
 241              		.cfi_offset 14, -4
ARM GAS  /tmp/ccTzMmp3.s 			page 7


 242 0002 0646     		mov	r6, r0
 109:Core/Src/OLED.c **** 	uint8_t i;
 243              		.loc 1 109 2 is_stmt 1 view .LVU36
 110:Core/Src/OLED.c **** 	for (i = 0; i < 8; i++)
 244              		.loc 1 110 2 view .LVU37
 245              	.LVL12:
 246              		.loc 1 110 9 is_stmt 0 view .LVU38
 247 0004 0024     		movs	r4, #0
 248              		.loc 1 110 2 view .LVU39
 249 0006 16E0     		b	.L14
 250              	.LVL13:
 251              	.L15:
 111:Core/Src/OLED.c **** 	{
 112:Core/Src/OLED.c **** 		OLED_W_SDA(Byte & (0x80 >> i));
 252              		.loc 1 112 3 is_stmt 1 discriminator 3 view .LVU40
 253 0008 8022     		movs	r2, #128
 254 000a 2241     		asrs	r2, r2, r4
 255 000c 124D     		ldr	r5, .L17
 256 000e 3240     		ands	r2, r2, r6
 257 0010 4FF40071 		mov	r1, #512
 258 0014 2846     		mov	r0, r5
 259 0016 FFF7FEFF 		bl	HAL_GPIO_WritePin
 260              	.LVL14:
 113:Core/Src/OLED.c **** 		OLED_W_SCL(1);
 261              		.loc 1 113 3 discriminator 3 view .LVU41
 262 001a 0122     		movs	r2, #1
 263 001c 4FF48071 		mov	r1, #256
 264 0020 2846     		mov	r0, r5
 265 0022 FFF7FEFF 		bl	HAL_GPIO_WritePin
 266              	.LVL15:
 114:Core/Src/OLED.c **** 		OLED_W_SCL(0);
 267              		.loc 1 114 3 discriminator 3 view .LVU42
 268 0026 0022     		movs	r2, #0
 269 0028 4FF48071 		mov	r1, #256
 270 002c 2846     		mov	r0, r5
 271 002e FFF7FEFF 		bl	HAL_GPIO_WritePin
 272              	.LVL16:
 110:Core/Src/OLED.c **** 	{
 273              		.loc 1 110 21 discriminator 3 view .LVU43
 110:Core/Src/OLED.c **** 	{
 274              		.loc 1 110 22 is_stmt 0 discriminator 3 view .LVU44
 275 0032 0134     		adds	r4, r4, #1
 276              	.LVL17:
 110:Core/Src/OLED.c **** 	{
 277              		.loc 1 110 22 discriminator 3 view .LVU45
 278 0034 E4B2     		uxtb	r4, r4
 279              	.LVL18:
 280              	.L14:
 110:Core/Src/OLED.c **** 	{
 281              		.loc 1 110 14 is_stmt 1 discriminator 1 view .LVU46
 110:Core/Src/OLED.c **** 	{
 282              		.loc 1 110 2 is_stmt 0 discriminator 1 view .LVU47
 283 0036 072C     		cmp	r4, #7
 284 0038 E6D9     		bls	.L15
 115:Core/Src/OLED.c **** 	}
 116:Core/Src/OLED.c **** 	OLED_W_SCL(1);	//额外的一个时钟，不处理应答信号
 285              		.loc 1 116 2 is_stmt 1 view .LVU48
ARM GAS  /tmp/ccTzMmp3.s 			page 8


 286 003a 074C     		ldr	r4, .L17
 287              	.LVL19:
 288              		.loc 1 116 2 is_stmt 0 view .LVU49
 289 003c 0122     		movs	r2, #1
 290 003e 4FF48071 		mov	r1, #256
 291 0042 2046     		mov	r0, r4
 292 0044 FFF7FEFF 		bl	HAL_GPIO_WritePin
 293              	.LVL20:
 117:Core/Src/OLED.c **** 	OLED_W_SCL(0);
 294              		.loc 1 117 2 is_stmt 1 view .LVU50
 295 0048 0022     		movs	r2, #0
 296 004a 4FF48071 		mov	r1, #256
 297 004e 2046     		mov	r0, r4
 298 0050 FFF7FEFF 		bl	HAL_GPIO_WritePin
 299              	.LVL21:
 118:Core/Src/OLED.c **** }
 300              		.loc 1 118 1 is_stmt 0 view .LVU51
 301 0054 70BD     		pop	{r4, r5, r6, pc}
 302              	.L18:
 303 0056 00BF     		.align	2
 304              	.L17:
 305 0058 000C0140 		.word	1073810432
 306              		.cfi_endproc
 307              	.LFE68:
 309              		.section	.text.OLED_WriteCommand,"ax",%progbits
 310              		.align	1
 311              		.global	OLED_WriteCommand
 312              		.syntax unified
 313              		.thumb
 314              		.thumb_func
 315              		.fpu softvfp
 317              	OLED_WriteCommand:
 318              	.LVL22:
 319              	.LFB69:
 119:Core/Src/OLED.c **** 
 120:Core/Src/OLED.c **** /**
 121:Core/Src/OLED.c ****   * @brief  OLED写命令
 122:Core/Src/OLED.c ****   * @param  Command 要写入的命令
 123:Core/Src/OLED.c ****   * @retval 无
 124:Core/Src/OLED.c ****   */
 125:Core/Src/OLED.c **** void OLED_WriteCommand(uint8_t Command)
 126:Core/Src/OLED.c **** {
 320              		.loc 1 126 1 is_stmt 1 view -0
 321              		.cfi_startproc
 322              		@ args = 0, pretend = 0, frame = 0
 323              		@ frame_needed = 0, uses_anonymous_args = 0
 324              		.loc 1 126 1 is_stmt 0 view .LVU53
 325 0000 10B5     		push	{r4, lr}
 326              	.LCFI6:
 327              		.cfi_def_cfa_offset 8
 328              		.cfi_offset 4, -8
 329              		.cfi_offset 14, -4
 330 0002 0446     		mov	r4, r0
 127:Core/Src/OLED.c **** 	OLED_I2C_Start();
 331              		.loc 1 127 2 is_stmt 1 view .LVU54
 332 0004 FFF7FEFF 		bl	OLED_I2C_Start
 333              	.LVL23:
ARM GAS  /tmp/ccTzMmp3.s 			page 9


 128:Core/Src/OLED.c **** 	OLED_I2C_SendByte(0x78);		//从机地址
 334              		.loc 1 128 2 view .LVU55
 335 0008 7820     		movs	r0, #120
 336 000a FFF7FEFF 		bl	OLED_I2C_SendByte
 337              	.LVL24:
 129:Core/Src/OLED.c **** 	OLED_I2C_SendByte(0x00);		//写命令
 338              		.loc 1 129 2 view .LVU56
 339 000e 0020     		movs	r0, #0
 340 0010 FFF7FEFF 		bl	OLED_I2C_SendByte
 341              	.LVL25:
 130:Core/Src/OLED.c **** 	OLED_I2C_SendByte(Command); 
 342              		.loc 1 130 2 view .LVU57
 343 0014 2046     		mov	r0, r4
 344 0016 FFF7FEFF 		bl	OLED_I2C_SendByte
 345              	.LVL26:
 131:Core/Src/OLED.c **** 	OLED_I2C_Stop();
 346              		.loc 1 131 2 view .LVU58
 347 001a FFF7FEFF 		bl	OLED_I2C_Stop
 348              	.LVL27:
 132:Core/Src/OLED.c **** }
 349              		.loc 1 132 1 is_stmt 0 view .LVU59
 350 001e 10BD     		pop	{r4, pc}
 351              		.cfi_endproc
 352              	.LFE69:
 354              		.section	.text.OLED_WriteData,"ax",%progbits
 355              		.align	1
 356              		.global	OLED_WriteData
 357              		.syntax unified
 358              		.thumb
 359              		.thumb_func
 360              		.fpu softvfp
 362              	OLED_WriteData:
 363              	.LVL28:
 364              	.LFB70:
 133:Core/Src/OLED.c **** 
 134:Core/Src/OLED.c **** /**
 135:Core/Src/OLED.c ****   * @brief  OLED写数据
 136:Core/Src/OLED.c ****   * @param  Data 要写入的数据
 137:Core/Src/OLED.c ****   * @retval 无
 138:Core/Src/OLED.c ****   */
 139:Core/Src/OLED.c **** void OLED_WriteData(uint8_t Data)
 140:Core/Src/OLED.c **** {
 365              		.loc 1 140 1 is_stmt 1 view -0
 366              		.cfi_startproc
 367              		@ args = 0, pretend = 0, frame = 0
 368              		@ frame_needed = 0, uses_anonymous_args = 0
 369              		.loc 1 140 1 is_stmt 0 view .LVU61
 370 0000 10B5     		push	{r4, lr}
 371              	.LCFI7:
 372              		.cfi_def_cfa_offset 8
 373              		.cfi_offset 4, -8
 374              		.cfi_offset 14, -4
 375 0002 0446     		mov	r4, r0
 141:Core/Src/OLED.c **** 	OLED_I2C_Start();
 376              		.loc 1 141 2 is_stmt 1 view .LVU62
 377 0004 FFF7FEFF 		bl	OLED_I2C_Start
 378              	.LVL29:
ARM GAS  /tmp/ccTzMmp3.s 			page 10


 142:Core/Src/OLED.c **** 	OLED_I2C_SendByte(0x78);		//从机地址
 379              		.loc 1 142 2 view .LVU63
 380 0008 7820     		movs	r0, #120
 381 000a FFF7FEFF 		bl	OLED_I2C_SendByte
 382              	.LVL30:
 143:Core/Src/OLED.c **** 	OLED_I2C_SendByte(0x40);		//写数据
 383              		.loc 1 143 2 view .LVU64
 384 000e 4020     		movs	r0, #64
 385 0010 FFF7FEFF 		bl	OLED_I2C_SendByte
 386              	.LVL31:
 144:Core/Src/OLED.c **** 	OLED_I2C_SendByte(Data);
 387              		.loc 1 144 2 view .LVU65
 388 0014 2046     		mov	r0, r4
 389 0016 FFF7FEFF 		bl	OLED_I2C_SendByte
 390              	.LVL32:
 145:Core/Src/OLED.c **** 	OLED_I2C_Stop();
 391              		.loc 1 145 2 view .LVU66
 392 001a FFF7FEFF 		bl	OLED_I2C_Stop
 393              	.LVL33:
 146:Core/Src/OLED.c **** }
 394              		.loc 1 146 1 is_stmt 0 view .LVU67
 395 001e 10BD     		pop	{r4, pc}
 396              		.cfi_endproc
 397              	.LFE70:
 399              		.section	.text.OLED_SetCursor,"ax",%progbits
 400              		.align	1
 401              		.global	OLED_SetCursor
 402              		.syntax unified
 403              		.thumb
 404              		.thumb_func
 405              		.fpu softvfp
 407              	OLED_SetCursor:
 408              	.LVL34:
 409              	.LFB71:
 147:Core/Src/OLED.c **** 
 148:Core/Src/OLED.c **** /**
 149:Core/Src/OLED.c ****   * @brief  OLED设置光标位置
 150:Core/Src/OLED.c ****   * @param  Y 以左上角为原点，向下方向的坐标，范围：0~7
 151:Core/Src/OLED.c ****   * @param  X 以左上角为原点，向右方向的坐标，范围：0~127
 152:Core/Src/OLED.c ****   * @retval 无
 153:Core/Src/OLED.c ****   */
 154:Core/Src/OLED.c **** void OLED_SetCursor(uint8_t Y, uint8_t X)
 155:Core/Src/OLED.c **** {
 410              		.loc 1 155 1 is_stmt 1 view -0
 411              		.cfi_startproc
 412              		@ args = 0, pretend = 0, frame = 0
 413              		@ frame_needed = 0, uses_anonymous_args = 0
 414              		.loc 1 155 1 is_stmt 0 view .LVU69
 415 0000 10B5     		push	{r4, lr}
 416              	.LCFI8:
 417              		.cfi_def_cfa_offset 8
 418              		.cfi_offset 4, -8
 419              		.cfi_offset 14, -4
 420 0002 0C46     		mov	r4, r1
 156:Core/Src/OLED.c **** 	OLED_WriteCommand(0xB0 | Y);					//设置Y位置
 421              		.loc 1 156 2 is_stmt 1 view .LVU70
 422 0004 40F0B000 		orr	r0, r0, #176
ARM GAS  /tmp/ccTzMmp3.s 			page 11


 423              	.LVL35:
 424              		.loc 1 156 2 is_stmt 0 view .LVU71
 425 0008 FFF7FEFF 		bl	OLED_WriteCommand
 426              	.LVL36:
 157:Core/Src/OLED.c **** 	OLED_WriteCommand(0x10 | ((X & 0xF0) >> 4));	//设置X位置高4位
 427              		.loc 1 157 2 is_stmt 1 view .LVU72
 428              		.loc 1 157 39 is_stmt 0 view .LVU73
 429 000c 2009     		lsrs	r0, r4, #4
 430              		.loc 1 157 2 view .LVU74
 431 000e 40F01000 		orr	r0, r0, #16
 432 0012 FFF7FEFF 		bl	OLED_WriteCommand
 433              	.LVL37:
 158:Core/Src/OLED.c **** 	OLED_WriteCommand(0x00 | (X & 0x0F));			//设置X位置低4位
 434              		.loc 1 158 2 is_stmt 1 view .LVU75
 435 0016 04F00F00 		and	r0, r4, #15
 436 001a FFF7FEFF 		bl	OLED_WriteCommand
 437              	.LVL38:
 159:Core/Src/OLED.c **** }
 438              		.loc 1 159 1 is_stmt 0 view .LVU76
 439 001e 10BD     		pop	{r4, pc}
 440              		.cfi_endproc
 441              	.LFE71:
 443              		.section	.text.OLED_Clear,"ax",%progbits
 444              		.align	1
 445              		.global	OLED_Clear
 446              		.syntax unified
 447              		.thumb
 448              		.thumb_func
 449              		.fpu softvfp
 451              	OLED_Clear:
 452              	.LFB72:
 160:Core/Src/OLED.c **** 
 161:Core/Src/OLED.c **** /**
 162:Core/Src/OLED.c ****   * @brief  OLED清屏
 163:Core/Src/OLED.c ****   * @param  无
 164:Core/Src/OLED.c ****   * @retval 无
 165:Core/Src/OLED.c ****   */
 166:Core/Src/OLED.c **** void OLED_Clear(void)
 167:Core/Src/OLED.c **** {  
 453              		.loc 1 167 1 is_stmt 1 view -0
 454              		.cfi_startproc
 455              		@ args = 0, pretend = 0, frame = 0
 456              		@ frame_needed = 0, uses_anonymous_args = 0
 457 0000 38B5     		push	{r3, r4, r5, lr}
 458              	.LCFI9:
 459              		.cfi_def_cfa_offset 16
 460              		.cfi_offset 3, -16
 461              		.cfi_offset 4, -12
 462              		.cfi_offset 5, -8
 463              		.cfi_offset 14, -4
 168:Core/Src/OLED.c **** 	uint8_t i, j;
 464              		.loc 1 168 2 view .LVU78
 169:Core/Src/OLED.c **** 	for (j = 0; j < 8; j++)
 465              		.loc 1 169 2 view .LVU79
 466              	.LVL39:
 467              		.loc 1 169 9 is_stmt 0 view .LVU80
 468 0002 0025     		movs	r5, #0
ARM GAS  /tmp/ccTzMmp3.s 			page 12


 469              		.loc 1 169 2 view .LVU81
 470 0004 09E0     		b	.L26
 471              	.LVL40:
 472              	.L28:
 170:Core/Src/OLED.c **** 	{
 171:Core/Src/OLED.c **** 		OLED_SetCursor(j, 0);
 172:Core/Src/OLED.c **** 		for(i = 0; i < 128; i++)
 173:Core/Src/OLED.c **** 		{
 174:Core/Src/OLED.c **** 			OLED_WriteData(0x00);
 473              		.loc 1 174 4 is_stmt 1 discriminator 3 view .LVU82
 474 0006 0020     		movs	r0, #0
 475 0008 FFF7FEFF 		bl	OLED_WriteData
 476              	.LVL41:
 172:Core/Src/OLED.c **** 		{
 477              		.loc 1 172 23 discriminator 3 view .LVU83
 172:Core/Src/OLED.c **** 		{
 478              		.loc 1 172 24 is_stmt 0 discriminator 3 view .LVU84
 479 000c 0134     		adds	r4, r4, #1
 480              	.LVL42:
 172:Core/Src/OLED.c **** 		{
 481              		.loc 1 172 24 discriminator 3 view .LVU85
 482 000e E4B2     		uxtb	r4, r4
 483              	.LVL43:
 484              	.L27:
 172:Core/Src/OLED.c **** 		{
 485              		.loc 1 172 14 is_stmt 1 discriminator 1 view .LVU86
 172:Core/Src/OLED.c **** 		{
 486              		.loc 1 172 3 is_stmt 0 discriminator 1 view .LVU87
 487 0010 14F0800F 		tst	r4, #128
 488 0014 F7D0     		beq	.L28
 169:Core/Src/OLED.c **** 	for (j = 0; j < 8; j++)
 489              		.loc 1 169 21 is_stmt 1 discriminator 2 view .LVU88
 169:Core/Src/OLED.c **** 	for (j = 0; j < 8; j++)
 490              		.loc 1 169 22 is_stmt 0 discriminator 2 view .LVU89
 491 0016 0135     		adds	r5, r5, #1
 492              	.LVL44:
 169:Core/Src/OLED.c **** 	for (j = 0; j < 8; j++)
 493              		.loc 1 169 22 discriminator 2 view .LVU90
 494 0018 EDB2     		uxtb	r5, r5
 495              	.LVL45:
 496              	.L26:
 169:Core/Src/OLED.c **** 	for (j = 0; j < 8; j++)
 497              		.loc 1 169 14 is_stmt 1 discriminator 1 view .LVU91
 169:Core/Src/OLED.c **** 	for (j = 0; j < 8; j++)
 498              		.loc 1 169 2 is_stmt 0 discriminator 1 view .LVU92
 499 001a 072D     		cmp	r5, #7
 500 001c 05D8     		bhi	.L31
 171:Core/Src/OLED.c **** 		for(i = 0; i < 128; i++)
 501              		.loc 1 171 3 is_stmt 1 view .LVU93
 502 001e 0021     		movs	r1, #0
 503 0020 2846     		mov	r0, r5
 504 0022 FFF7FEFF 		bl	OLED_SetCursor
 505              	.LVL46:
 172:Core/Src/OLED.c **** 		{
 506              		.loc 1 172 3 view .LVU94
 172:Core/Src/OLED.c **** 		{
 507              		.loc 1 172 9 is_stmt 0 view .LVU95
ARM GAS  /tmp/ccTzMmp3.s 			page 13


 508 0026 0024     		movs	r4, #0
 172:Core/Src/OLED.c **** 		{
 509              		.loc 1 172 3 view .LVU96
 510 0028 F2E7     		b	.L27
 511              	.LVL47:
 512              	.L31:
 175:Core/Src/OLED.c **** 		}
 176:Core/Src/OLED.c **** 	}
 177:Core/Src/OLED.c **** }
 513              		.loc 1 177 1 view .LVU97
 514 002a 38BD     		pop	{r3, r4, r5, pc}
 515              		.loc 1 177 1 view .LVU98
 516              		.cfi_endproc
 517              	.LFE72:
 519              		.section	.text.OLED_ShowChar,"ax",%progbits
 520              		.align	1
 521              		.global	OLED_ShowChar
 522              		.syntax unified
 523              		.thumb
 524              		.thumb_func
 525              		.fpu softvfp
 527              	OLED_ShowChar:
 528              	.LVL48:
 529              	.LFB73:
 178:Core/Src/OLED.c **** 
 179:Core/Src/OLED.c **** /**
 180:Core/Src/OLED.c ****   * @brief  OLED显示一个字符
 181:Core/Src/OLED.c ****   * @param  Line 行位置，范围：1~4
 182:Core/Src/OLED.c ****   * @param  Column 列位置，范围：1~16
 183:Core/Src/OLED.c ****   * @param  Char 要显示的一个字符，范围：ASCII可见字符
 184:Core/Src/OLED.c ****   * @retval 无
 185:Core/Src/OLED.c ****   */
 186:Core/Src/OLED.c **** void OLED_ShowChar(uint8_t Line, uint8_t Column, char Char)
 187:Core/Src/OLED.c **** {      	
 530              		.loc 1 187 1 is_stmt 1 view -0
 531              		.cfi_startproc
 532              		@ args = 0, pretend = 0, frame = 0
 533              		@ frame_needed = 0, uses_anonymous_args = 0
 534              		.loc 1 187 1 is_stmt 0 view .LVU100
 535 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 536              	.LCFI10:
 537              		.cfi_def_cfa_offset 24
 538              		.cfi_offset 3, -24
 539              		.cfi_offset 4, -20
 540              		.cfi_offset 5, -16
 541              		.cfi_offset 6, -12
 542              		.cfi_offset 7, -8
 543              		.cfi_offset 14, -4
 544 0002 1546     		mov	r5, r2
 188:Core/Src/OLED.c **** 	uint8_t i;
 545              		.loc 1 188 2 is_stmt 1 view .LVU101
 189:Core/Src/OLED.c **** 	OLED_SetCursor((Line - 1) * 2, (Column - 1) * 8);		//设置光标位置在上半部分
 546              		.loc 1 189 2 view .LVU102
 547 0004 461E     		subs	r6, r0, #1
 548 0006 7600     		lsls	r6, r6, #1
 549 0008 F6B2     		uxtb	r6, r6
 550 000a 4F1E     		subs	r7, r1, #1
ARM GAS  /tmp/ccTzMmp3.s 			page 14


 551 000c FF00     		lsls	r7, r7, #3
 552 000e FFB2     		uxtb	r7, r7
 553 0010 3946     		mov	r1, r7
 554              	.LVL49:
 555              		.loc 1 189 2 is_stmt 0 view .LVU103
 556 0012 3046     		mov	r0, r6
 557              	.LVL50:
 558              		.loc 1 189 2 view .LVU104
 559 0014 FFF7FEFF 		bl	OLED_SetCursor
 560              	.LVL51:
 190:Core/Src/OLED.c **** 	for (i = 0; i < 8; i++)
 561              		.loc 1 190 2 is_stmt 1 view .LVU105
 562              		.loc 1 190 9 is_stmt 0 view .LVU106
 563 0018 0024     		movs	r4, #0
 564              		.loc 1 190 2 view .LVU107
 565 001a 09E0     		b	.L33
 566              	.LVL52:
 567              	.L34:
 191:Core/Src/OLED.c **** 	{
 192:Core/Src/OLED.c **** 		OLED_WriteData(OLED_F8x16[Char - ' '][i]);			//显示上半部分内容
 568              		.loc 1 192 3 is_stmt 1 discriminator 3 view .LVU108
 569              		.loc 1 192 34 is_stmt 0 discriminator 3 view .LVU109
 570 001c A5F12003 		sub	r3, r5, #32
 571              		.loc 1 192 3 discriminator 3 view .LVU110
 572 0020 0F4A     		ldr	r2, .L38
 573 0022 02EB0313 		add	r3, r2, r3, lsl #4
 574 0026 185D     		ldrb	r0, [r3, r4]	@ zero_extendqisi2
 575 0028 FFF7FEFF 		bl	OLED_WriteData
 576              	.LVL53:
 190:Core/Src/OLED.c **** 	for (i = 0; i < 8; i++)
 577              		.loc 1 190 21 is_stmt 1 discriminator 3 view .LVU111
 190:Core/Src/OLED.c **** 	for (i = 0; i < 8; i++)
 578              		.loc 1 190 22 is_stmt 0 discriminator 3 view .LVU112
 579 002c 0134     		adds	r4, r4, #1
 580              	.LVL54:
 190:Core/Src/OLED.c **** 	for (i = 0; i < 8; i++)
 581              		.loc 1 190 22 discriminator 3 view .LVU113
 582 002e E4B2     		uxtb	r4, r4
 583              	.LVL55:
 584              	.L33:
 190:Core/Src/OLED.c **** 	for (i = 0; i < 8; i++)
 585              		.loc 1 190 14 is_stmt 1 discriminator 1 view .LVU114
 190:Core/Src/OLED.c **** 	for (i = 0; i < 8; i++)
 586              		.loc 1 190 2 is_stmt 0 discriminator 1 view .LVU115
 587 0030 072C     		cmp	r4, #7
 588 0032 F3D9     		bls	.L34
 193:Core/Src/OLED.c **** 	}
 194:Core/Src/OLED.c **** 	OLED_SetCursor((Line - 1) * 2 + 1, (Column - 1) * 8);	//设置光标位置在下半部分
 589              		.loc 1 194 2 is_stmt 1 view .LVU116
 590 0034 701C     		adds	r0, r6, #1
 591 0036 3946     		mov	r1, r7
 592 0038 C0B2     		uxtb	r0, r0
 593 003a FFF7FEFF 		bl	OLED_SetCursor
 594              	.LVL56:
 195:Core/Src/OLED.c **** 	for (i = 0; i < 8; i++)
 595              		.loc 1 195 2 view .LVU117
 596              		.loc 1 195 9 is_stmt 0 view .LVU118
ARM GAS  /tmp/ccTzMmp3.s 			page 15


 597 003e 0024     		movs	r4, #0
 598              		.loc 1 195 2 view .LVU119
 599 0040 0BE0     		b	.L35
 600              	.LVL57:
 601              	.L36:
 196:Core/Src/OLED.c **** 	{
 197:Core/Src/OLED.c **** 		OLED_WriteData(OLED_F8x16[Char - ' '][i + 8]);		//显示下半部分内容
 602              		.loc 1 197 3 is_stmt 1 discriminator 3 view .LVU120
 603              		.loc 1 197 34 is_stmt 0 discriminator 3 view .LVU121
 604 0042 A5F12003 		sub	r3, r5, #32
 605              		.loc 1 197 43 discriminator 3 view .LVU122
 606 0046 04F10802 		add	r2, r4, #8
 607              		.loc 1 197 3 discriminator 3 view .LVU123
 608 004a 0549     		ldr	r1, .L38
 609 004c 01EB0313 		add	r3, r1, r3, lsl #4
 610 0050 985C     		ldrb	r0, [r3, r2]	@ zero_extendqisi2
 611 0052 FFF7FEFF 		bl	OLED_WriteData
 612              	.LVL58:
 195:Core/Src/OLED.c **** 	for (i = 0; i < 8; i++)
 613              		.loc 1 195 21 is_stmt 1 discriminator 3 view .LVU124
 195:Core/Src/OLED.c **** 	for (i = 0; i < 8; i++)
 614              		.loc 1 195 22 is_stmt 0 discriminator 3 view .LVU125
 615 0056 0134     		adds	r4, r4, #1
 616              	.LVL59:
 195:Core/Src/OLED.c **** 	for (i = 0; i < 8; i++)
 617              		.loc 1 195 22 discriminator 3 view .LVU126
 618 0058 E4B2     		uxtb	r4, r4
 619              	.LVL60:
 620              	.L35:
 195:Core/Src/OLED.c **** 	for (i = 0; i < 8; i++)
 621              		.loc 1 195 14 is_stmt 1 discriminator 1 view .LVU127
 195:Core/Src/OLED.c **** 	for (i = 0; i < 8; i++)
 622              		.loc 1 195 2 is_stmt 0 discriminator 1 view .LVU128
 623 005a 072C     		cmp	r4, #7
 624 005c F1D9     		bls	.L36
 198:Core/Src/OLED.c **** 	}
 199:Core/Src/OLED.c **** }
 625              		.loc 1 199 1 view .LVU129
 626 005e F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 627              	.LVL61:
 628              	.L39:
 629              		.loc 1 199 1 view .LVU130
 630              		.align	2
 631              	.L38:
 632 0060 00000000 		.word	.LANCHOR0
 633              		.cfi_endproc
 634              	.LFE73:
 636              		.section	.text.OLED_ShowString,"ax",%progbits
 637              		.align	1
 638              		.global	OLED_ShowString
 639              		.syntax unified
 640              		.thumb
 641              		.thumb_func
 642              		.fpu softvfp
 644              	OLED_ShowString:
 645              	.LVL62:
 646              	.LFB74:
ARM GAS  /tmp/ccTzMmp3.s 			page 16


 200:Core/Src/OLED.c **** 
 201:Core/Src/OLED.c **** /**
 202:Core/Src/OLED.c ****   * @brief  OLED显示字符串
 203:Core/Src/OLED.c ****   * @param  Line 起始行位置，范围：1~4
 204:Core/Src/OLED.c ****   * @param  Column 起始列位置，范围：1~16
 205:Core/Src/OLED.c ****   * @param  String 要显示的字符串，范围：ASCII可见字符
 206:Core/Src/OLED.c ****   * @retval 无
 207:Core/Src/OLED.c ****   */
 208:Core/Src/OLED.c **** void OLED_ShowString(uint8_t Line, uint8_t Column, char *String)
 209:Core/Src/OLED.c **** {
 647              		.loc 1 209 1 is_stmt 1 view -0
 648              		.cfi_startproc
 649              		@ args = 0, pretend = 0, frame = 0
 650              		@ frame_needed = 0, uses_anonymous_args = 0
 651              		.loc 1 209 1 is_stmt 0 view .LVU132
 652 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 653              	.LCFI11:
 654              		.cfi_def_cfa_offset 24
 655              		.cfi_offset 3, -24
 656              		.cfi_offset 4, -20
 657              		.cfi_offset 5, -16
 658              		.cfi_offset 6, -12
 659              		.cfi_offset 7, -8
 660              		.cfi_offset 14, -4
 661 0002 0746     		mov	r7, r0
 662 0004 0E46     		mov	r6, r1
 663 0006 1546     		mov	r5, r2
 210:Core/Src/OLED.c **** 	uint8_t i;
 664              		.loc 1 210 2 is_stmt 1 view .LVU133
 211:Core/Src/OLED.c **** 	for (i = 0; String[i] != '\0'; i++)
 665              		.loc 1 211 2 view .LVU134
 666              	.LVL63:
 667              		.loc 1 211 9 is_stmt 0 view .LVU135
 668 0008 0024     		movs	r4, #0
 669              		.loc 1 211 2 view .LVU136
 670 000a 06E0     		b	.L41
 671              	.LVL64:
 672              	.L42:
 212:Core/Src/OLED.c **** 	{
 213:Core/Src/OLED.c **** 		OLED_ShowChar(Line, Column + i, String[i]);
 673              		.loc 1 213 3 is_stmt 1 discriminator 3 view .LVU137
 674 000c A119     		adds	r1, r4, r6
 675 000e C9B2     		uxtb	r1, r1
 676 0010 3846     		mov	r0, r7
 677 0012 FFF7FEFF 		bl	OLED_ShowChar
 678              	.LVL65:
 211:Core/Src/OLED.c **** 	for (i = 0; String[i] != '\0'; i++)
 679              		.loc 1 211 33 discriminator 3 view .LVU138
 211:Core/Src/OLED.c **** 	for (i = 0; String[i] != '\0'; i++)
 680              		.loc 1 211 34 is_stmt 0 discriminator 3 view .LVU139
 681 0016 0134     		adds	r4, r4, #1
 682              	.LVL66:
 211:Core/Src/OLED.c **** 	for (i = 0; String[i] != '\0'; i++)
 683              		.loc 1 211 34 discriminator 3 view .LVU140
 684 0018 E4B2     		uxtb	r4, r4
 685              	.LVL67:
 686              	.L41:
ARM GAS  /tmp/ccTzMmp3.s 			page 17


 211:Core/Src/OLED.c **** 	for (i = 0; String[i] != '\0'; i++)
 687              		.loc 1 211 14 is_stmt 1 discriminator 1 view .LVU141
 211:Core/Src/OLED.c **** 	for (i = 0; String[i] != '\0'; i++)
 688              		.loc 1 211 20 is_stmt 0 discriminator 1 view .LVU142
 689 001a 2A5D     		ldrb	r2, [r5, r4]	@ zero_extendqisi2
 211:Core/Src/OLED.c **** 	for (i = 0; String[i] != '\0'; i++)
 690              		.loc 1 211 2 discriminator 1 view .LVU143
 691 001c 002A     		cmp	r2, #0
 692 001e F5D1     		bne	.L42
 214:Core/Src/OLED.c **** 	}
 215:Core/Src/OLED.c **** }
 693              		.loc 1 215 1 view .LVU144
 694 0020 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 695              		.loc 1 215 1 view .LVU145
 696              		.cfi_endproc
 697              	.LFE74:
 699              		.section	.text.OLED_Pow,"ax",%progbits
 700              		.align	1
 701              		.global	OLED_Pow
 702              		.syntax unified
 703              		.thumb
 704              		.thumb_func
 705              		.fpu softvfp
 707              	OLED_Pow:
 708              	.LVL68:
 709              	.LFB75:
 216:Core/Src/OLED.c **** 
 217:Core/Src/OLED.c **** /**
 218:Core/Src/OLED.c ****   * @brief  OLED次方函数
 219:Core/Src/OLED.c ****   * @retval 返回值等于X的Y次方
 220:Core/Src/OLED.c ****   */
 221:Core/Src/OLED.c **** uint32_t OLED_Pow(uint32_t X, uint32_t Y)
 222:Core/Src/OLED.c **** {
 710              		.loc 1 222 1 is_stmt 1 view -0
 711              		.cfi_startproc
 712              		@ args = 0, pretend = 0, frame = 0
 713              		@ frame_needed = 0, uses_anonymous_args = 0
 714              		@ link register save eliminated.
 715              		.loc 1 222 1 is_stmt 0 view .LVU147
 716 0000 0246     		mov	r2, r0
 223:Core/Src/OLED.c **** 	uint32_t Result = 1;
 717              		.loc 1 223 2 is_stmt 1 view .LVU148
 718              	.LVL69:
 224:Core/Src/OLED.c **** 	while (Y--)
 719              		.loc 1 224 2 view .LVU149
 223:Core/Src/OLED.c **** 	uint32_t Result = 1;
 720              		.loc 1 223 11 is_stmt 0 view .LVU150
 721 0002 0120     		movs	r0, #1
 722              	.LVL70:
 723              		.loc 1 224 8 view .LVU151
 724 0004 02E0     		b	.L45
 725              	.LVL71:
 726              	.L46:
 225:Core/Src/OLED.c **** 	{
 226:Core/Src/OLED.c **** 		Result *= X;
 727              		.loc 1 226 3 is_stmt 1 view .LVU152
 728              		.loc 1 226 10 is_stmt 0 view .LVU153
ARM GAS  /tmp/ccTzMmp3.s 			page 18


 729 0006 02FB00F0 		mul	r0, r2, r0
 730              	.LVL72:
 224:Core/Src/OLED.c **** 	while (Y--)
 731              		.loc 1 224 10 view .LVU154
 732 000a 1946     		mov	r1, r3
 733              	.LVL73:
 734              	.L45:
 224:Core/Src/OLED.c **** 	while (Y--)
 735              		.loc 1 224 8 is_stmt 1 view .LVU155
 224:Core/Src/OLED.c **** 	while (Y--)
 736              		.loc 1 224 10 is_stmt 0 view .LVU156
 737 000c 4B1E     		subs	r3, r1, #1
 738              	.LVL74:
 224:Core/Src/OLED.c **** 	while (Y--)
 739              		.loc 1 224 8 view .LVU157
 740 000e 0029     		cmp	r1, #0
 741 0010 F9D1     		bne	.L46
 227:Core/Src/OLED.c **** 	}
 228:Core/Src/OLED.c **** 	return Result;
 742              		.loc 1 228 2 is_stmt 1 view .LVU158
 229:Core/Src/OLED.c **** }
 743              		.loc 1 229 1 is_stmt 0 view .LVU159
 744 0012 7047     		bx	lr
 745              		.cfi_endproc
 746              	.LFE75:
 748              		.section	.text.OLED_ShowNum,"ax",%progbits
 749              		.align	1
 750              		.global	OLED_ShowNum
 751              		.syntax unified
 752              		.thumb
 753              		.thumb_func
 754              		.fpu softvfp
 756              	OLED_ShowNum:
 757              	.LVL75:
 758              	.LFB76:
 230:Core/Src/OLED.c **** 
 231:Core/Src/OLED.c **** /**
 232:Core/Src/OLED.c ****   * @brief  OLED显示数字（十进制，正数）
 233:Core/Src/OLED.c ****   * @param  Line 起始行位置，范围：1~4
 234:Core/Src/OLED.c ****   * @param  Column 起始列位置，范围：1~16
 235:Core/Src/OLED.c ****   * @param  Number 要显示的数字，范围：0~4294967295
 236:Core/Src/OLED.c ****   * @param  Length 要显示数字的长度，范围：1~10
 237:Core/Src/OLED.c ****   * @retval 无
 238:Core/Src/OLED.c ****   */
 239:Core/Src/OLED.c **** void OLED_ShowNum(uint8_t Line, uint8_t Column, uint32_t Number, uint8_t Length)
 240:Core/Src/OLED.c **** {
 759              		.loc 1 240 1 is_stmt 1 view -0
 760              		.cfi_startproc
 761              		@ args = 0, pretend = 0, frame = 0
 762              		@ frame_needed = 0, uses_anonymous_args = 0
 763              		.loc 1 240 1 is_stmt 0 view .LVU161
 764 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 765              	.LCFI12:
 766              		.cfi_def_cfa_offset 32
 767              		.cfi_offset 3, -32
 768              		.cfi_offset 4, -28
 769              		.cfi_offset 5, -24
ARM GAS  /tmp/ccTzMmp3.s 			page 19


 770              		.cfi_offset 6, -20
 771              		.cfi_offset 7, -16
 772              		.cfi_offset 8, -12
 773              		.cfi_offset 9, -8
 774              		.cfi_offset 14, -4
 775 0004 8146     		mov	r9, r0
 776 0006 8846     		mov	r8, r1
 777 0008 1746     		mov	r7, r2
 778 000a 1E46     		mov	r6, r3
 241:Core/Src/OLED.c **** 	uint8_t i;
 779              		.loc 1 241 2 is_stmt 1 view .LVU162
 242:Core/Src/OLED.c **** 	for (i = 0; i < Length; i++)							
 780              		.loc 1 242 2 view .LVU163
 781              	.LVL76:
 782              		.loc 1 242 9 is_stmt 0 view .LVU164
 783 000c 0024     		movs	r4, #0
 784              		.loc 1 242 2 view .LVU165
 785 000e 19E0     		b	.L48
 786              	.LVL77:
 787              	.L49:
 243:Core/Src/OLED.c **** 	{
 244:Core/Src/OLED.c **** 		OLED_ShowChar(Line, Column + i, Number / OLED_Pow(10, Length - i - 1) % 10 + '0');
 788              		.loc 1 244 3 is_stmt 1 discriminator 3 view .LVU166
 789 0010 04EB0805 		add	r5, r4, r8
 790 0014 EDB2     		uxtb	r5, r5
 791              		.loc 1 244 64 is_stmt 0 discriminator 3 view .LVU167
 792 0016 311B     		subs	r1, r6, r4
 793              		.loc 1 244 44 discriminator 3 view .LVU168
 794 0018 0139     		subs	r1, r1, #1
 795 001a 0A20     		movs	r0, #10
 796 001c FFF7FEFF 		bl	OLED_Pow
 797              	.LVL78:
 798              		.loc 1 244 42 discriminator 3 view .LVU169
 799 0020 B7FBF0F0 		udiv	r0, r7, r0
 800              		.loc 1 244 73 discriminator 3 view .LVU170
 801 0024 094A     		ldr	r2, .L51
 802 0026 A2FB0032 		umull	r3, r2, r2, r0
 803 002a D208     		lsrs	r2, r2, #3
 804 002c 02EB8202 		add	r2, r2, r2, lsl #2
 805 0030 A0EB4202 		sub	r2, r0, r2, lsl #1
 806              		.loc 1 244 3 discriminator 3 view .LVU171
 807 0034 3032     		adds	r2, r2, #48
 808 0036 D2B2     		uxtb	r2, r2
 809 0038 2946     		mov	r1, r5
 810 003a 4846     		mov	r0, r9
 811 003c FFF7FEFF 		bl	OLED_ShowChar
 812              	.LVL79:
 242:Core/Src/OLED.c **** 	for (i = 0; i < Length; i++)							
 813              		.loc 1 242 26 is_stmt 1 discriminator 3 view .LVU172
 242:Core/Src/OLED.c **** 	for (i = 0; i < Length; i++)							
 814              		.loc 1 242 27 is_stmt 0 discriminator 3 view .LVU173
 815 0040 0134     		adds	r4, r4, #1
 816              	.LVL80:
 242:Core/Src/OLED.c **** 	for (i = 0; i < Length; i++)							
 817              		.loc 1 242 27 discriminator 3 view .LVU174
 818 0042 E4B2     		uxtb	r4, r4
 819              	.LVL81:
ARM GAS  /tmp/ccTzMmp3.s 			page 20


 820              	.L48:
 242:Core/Src/OLED.c **** 	for (i = 0; i < Length; i++)							
 821              		.loc 1 242 14 is_stmt 1 discriminator 1 view .LVU175
 242:Core/Src/OLED.c **** 	for (i = 0; i < Length; i++)							
 822              		.loc 1 242 2 is_stmt 0 discriminator 1 view .LVU176
 823 0044 B442     		cmp	r4, r6
 824 0046 E3D3     		bcc	.L49
 245:Core/Src/OLED.c **** 	}
 246:Core/Src/OLED.c **** }
 825              		.loc 1 246 1 view .LVU177
 826 0048 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 827              	.LVL82:
 828              	.L52:
 829              		.loc 1 246 1 view .LVU178
 830              		.align	2
 831              	.L51:
 832 004c CDCCCCCC 		.word	-858993459
 833              		.cfi_endproc
 834              	.LFE76:
 836              		.section	.text.OLED_ShowSignedNum,"ax",%progbits
 837              		.align	1
 838              		.global	OLED_ShowSignedNum
 839              		.syntax unified
 840              		.thumb
 841              		.thumb_func
 842              		.fpu softvfp
 844              	OLED_ShowSignedNum:
 845              	.LVL83:
 846              	.LFB77:
 247:Core/Src/OLED.c **** 
 248:Core/Src/OLED.c **** /**
 249:Core/Src/OLED.c ****   * @brief  OLED显示数字（十进制，带符号数）
 250:Core/Src/OLED.c ****   * @param  Line 起始行位置，范围：1~4
 251:Core/Src/OLED.c ****   * @param  Column 起始列位置，范围：1~16
 252:Core/Src/OLED.c ****   * @param  Number 要显示的数字，范围：-2147483648~2147483647
 253:Core/Src/OLED.c ****   * @param  Length 要显示数字的长度，范围：1~10
 254:Core/Src/OLED.c ****   * @retval 无
 255:Core/Src/OLED.c ****   */
 256:Core/Src/OLED.c **** void OLED_ShowSignedNum(uint8_t Line, uint8_t Column, int32_t Number, uint8_t Length)
 257:Core/Src/OLED.c **** {
 847              		.loc 1 257 1 is_stmt 1 view -0
 848              		.cfi_startproc
 849              		@ args = 0, pretend = 0, frame = 0
 850              		@ frame_needed = 0, uses_anonymous_args = 0
 851              		.loc 1 257 1 is_stmt 0 view .LVU180
 852 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 853              	.LCFI13:
 854              		.cfi_def_cfa_offset 32
 855              		.cfi_offset 3, -32
 856              		.cfi_offset 4, -28
 857              		.cfi_offset 5, -24
 858              		.cfi_offset 6, -20
 859              		.cfi_offset 7, -16
 860              		.cfi_offset 8, -12
 861              		.cfi_offset 9, -8
 862              		.cfi_offset 14, -4
 863 0004 8046     		mov	r8, r0
ARM GAS  /tmp/ccTzMmp3.s 			page 21


 864 0006 8946     		mov	r9, r1
 865 0008 1E46     		mov	r6, r3
 258:Core/Src/OLED.c **** 	uint8_t i;
 866              		.loc 1 258 2 is_stmt 1 view .LVU181
 259:Core/Src/OLED.c **** 	uint32_t Number1;
 867              		.loc 1 259 2 view .LVU182
 260:Core/Src/OLED.c **** 	if (Number >= 0)
 868              		.loc 1 260 2 view .LVU183
 869              		.loc 1 260 5 is_stmt 0 view .LVU184
 870 000a 171E     		subs	r7, r2, #0
 871 000c 04DB     		blt	.L54
 261:Core/Src/OLED.c **** 	{
 262:Core/Src/OLED.c **** 		OLED_ShowChar(Line, Column, '+');
 872              		.loc 1 262 3 is_stmt 1 view .LVU185
 873 000e 2B22     		movs	r2, #43
 874              	.LVL84:
 875              		.loc 1 262 3 is_stmt 0 view .LVU186
 876 0010 FFF7FEFF 		bl	OLED_ShowChar
 877              	.LVL85:
 263:Core/Src/OLED.c **** 		Number1 = Number;
 878              		.loc 1 263 3 is_stmt 1 view .LVU187
 879              	.L55:
 264:Core/Src/OLED.c **** 	}
 265:Core/Src/OLED.c **** 	else
 266:Core/Src/OLED.c **** 	{
 267:Core/Src/OLED.c **** 		OLED_ShowChar(Line, Column, '-');
 268:Core/Src/OLED.c **** 		Number1 = -Number;
 269:Core/Src/OLED.c **** 	}
 270:Core/Src/OLED.c **** 	for (i = 0; i < Length; i++)							
 880              		.loc 1 270 2 view .LVU188
 881              		.loc 1 270 9 is_stmt 0 view .LVU189
 882 0014 0024     		movs	r4, #0
 883              		.loc 1 270 2 view .LVU190
 884 0016 1FE0     		b	.L56
 885              	.LVL86:
 886              	.L54:
 267:Core/Src/OLED.c **** 		Number1 = -Number;
 887              		.loc 1 267 3 is_stmt 1 view .LVU191
 888 0018 2D22     		movs	r2, #45
 889              	.LVL87:
 267:Core/Src/OLED.c **** 		Number1 = -Number;
 890              		.loc 1 267 3 is_stmt 0 view .LVU192
 891 001a FFF7FEFF 		bl	OLED_ShowChar
 892              	.LVL88:
 268:Core/Src/OLED.c **** 	}
 893              		.loc 1 268 3 is_stmt 1 view .LVU193
 268:Core/Src/OLED.c **** 	}
 894              		.loc 1 268 13 is_stmt 0 view .LVU194
 895 001e 7F42     		rsbs	r7, r7, #0
 896              	.LVL89:
 268:Core/Src/OLED.c **** 	}
 897              		.loc 1 268 13 view .LVU195
 898 0020 F8E7     		b	.L55
 899              	.LVL90:
 900              	.L57:
 271:Core/Src/OLED.c **** 	{
 272:Core/Src/OLED.c **** 		OLED_ShowChar(Line, Column + i + 1, Number1 / OLED_Pow(10, Length - i - 1) % 10 + '0');
ARM GAS  /tmp/ccTzMmp3.s 			page 22


 901              		.loc 1 272 3 is_stmt 1 discriminator 3 view .LVU196
 902              		.loc 1 272 30 is_stmt 0 discriminator 3 view .LVU197
 903 0022 04EB0905 		add	r5, r4, r9
 904 0026 EDB2     		uxtb	r5, r5
 905              		.loc 1 272 69 discriminator 3 view .LVU198
 906 0028 311B     		subs	r1, r6, r4
 907              		.loc 1 272 49 discriminator 3 view .LVU199
 908 002a 0139     		subs	r1, r1, #1
 909 002c 0A20     		movs	r0, #10
 910 002e FFF7FEFF 		bl	OLED_Pow
 911              	.LVL91:
 912              		.loc 1 272 47 discriminator 3 view .LVU200
 913 0032 B7FBF0F0 		udiv	r0, r7, r0
 914              		.loc 1 272 78 discriminator 3 view .LVU201
 915 0036 0A4A     		ldr	r2, .L59
 916 0038 A2FB0032 		umull	r3, r2, r2, r0
 917 003c D208     		lsrs	r2, r2, #3
 918 003e 02EB8202 		add	r2, r2, r2, lsl #2
 919 0042 A0EB4202 		sub	r2, r0, r2, lsl #1
 920              		.loc 1 272 3 discriminator 3 view .LVU202
 921 0046 3032     		adds	r2, r2, #48
 922 0048 691C     		adds	r1, r5, #1
 923 004a D2B2     		uxtb	r2, r2
 924 004c C9B2     		uxtb	r1, r1
 925 004e 4046     		mov	r0, r8
 926 0050 FFF7FEFF 		bl	OLED_ShowChar
 927              	.LVL92:
 270:Core/Src/OLED.c **** 	{
 928              		.loc 1 270 26 is_stmt 1 discriminator 3 view .LVU203
 270:Core/Src/OLED.c **** 	{
 929              		.loc 1 270 27 is_stmt 0 discriminator 3 view .LVU204
 930 0054 0134     		adds	r4, r4, #1
 931              	.LVL93:
 270:Core/Src/OLED.c **** 	{
 932              		.loc 1 270 27 discriminator 3 view .LVU205
 933 0056 E4B2     		uxtb	r4, r4
 934              	.LVL94:
 935              	.L56:
 270:Core/Src/OLED.c **** 	{
 936              		.loc 1 270 14 is_stmt 1 discriminator 1 view .LVU206
 270:Core/Src/OLED.c **** 	{
 937              		.loc 1 270 2 is_stmt 0 discriminator 1 view .LVU207
 938 0058 B442     		cmp	r4, r6
 939 005a E2D3     		bcc	.L57
 273:Core/Src/OLED.c **** 	}
 274:Core/Src/OLED.c **** }
 940              		.loc 1 274 1 view .LVU208
 941 005c BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 942              	.LVL95:
 943              	.L60:
 944              		.loc 1 274 1 view .LVU209
 945              		.align	2
 946              	.L59:
 947 0060 CDCCCCCC 		.word	-858993459
 948              		.cfi_endproc
 949              	.LFE77:
 951              		.section	.text.OLED_ShowHexNum,"ax",%progbits
ARM GAS  /tmp/ccTzMmp3.s 			page 23


 952              		.align	1
 953              		.global	OLED_ShowHexNum
 954              		.syntax unified
 955              		.thumb
 956              		.thumb_func
 957              		.fpu softvfp
 959              	OLED_ShowHexNum:
 960              	.LVL96:
 961              	.LFB78:
 275:Core/Src/OLED.c **** 
 276:Core/Src/OLED.c **** /**
 277:Core/Src/OLED.c ****   * @brief  OLED显示数字（十六进制，正数）
 278:Core/Src/OLED.c ****   * @param  Line 起始行位置，范围：1~4
 279:Core/Src/OLED.c ****   * @param  Column 起始列位置，范围：1~16
 280:Core/Src/OLED.c ****   * @param  Number 要显示的数字，范围：0~0xFFFFFFFF
 281:Core/Src/OLED.c ****   * @param  Length 要显示数字的长度，范围：1~8
 282:Core/Src/OLED.c ****   * @retval 无
 283:Core/Src/OLED.c ****   */
 284:Core/Src/OLED.c **** void OLED_ShowHexNum(uint8_t Line, uint8_t Column, uint32_t Number, uint8_t Length)
 285:Core/Src/OLED.c **** {
 962              		.loc 1 285 1 is_stmt 1 view -0
 963              		.cfi_startproc
 964              		@ args = 0, pretend = 0, frame = 0
 965              		@ frame_needed = 0, uses_anonymous_args = 0
 966              		.loc 1 285 1 is_stmt 0 view .LVU211
 967 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 968              	.LCFI14:
 969              		.cfi_def_cfa_offset 24
 970              		.cfi_offset 4, -24
 971              		.cfi_offset 5, -20
 972              		.cfi_offset 6, -16
 973              		.cfi_offset 7, -12
 974              		.cfi_offset 8, -8
 975              		.cfi_offset 14, -4
 976 0004 8046     		mov	r8, r0
 977 0006 0F46     		mov	r7, r1
 978 0008 1646     		mov	r6, r2
 979 000a 1D46     		mov	r5, r3
 286:Core/Src/OLED.c **** 	uint8_t i, SingleNumber;
 980              		.loc 1 286 2 is_stmt 1 view .LVU212
 287:Core/Src/OLED.c **** 	for (i = 0; i < Length; i++)							
 981              		.loc 1 287 2 view .LVU213
 982              	.LVL97:
 983              		.loc 1 287 9 is_stmt 0 view .LVU214
 984 000c 0024     		movs	r4, #0
 985              		.loc 1 287 2 view .LVU215
 986 000e 07E0     		b	.L62
 987              	.LVL98:
 988              	.L63:
 288:Core/Src/OLED.c **** 	{
 289:Core/Src/OLED.c **** 		SingleNumber = Number / OLED_Pow(16, Length - i - 1) % 16;
 290:Core/Src/OLED.c **** 		if (SingleNumber < 10)
 291:Core/Src/OLED.c **** 		{
 292:Core/Src/OLED.c **** 			OLED_ShowChar(Line, Column + i, SingleNumber + '0');
 293:Core/Src/OLED.c **** 		}
 294:Core/Src/OLED.c **** 		else
 295:Core/Src/OLED.c **** 		{
ARM GAS  /tmp/ccTzMmp3.s 			page 24


 296:Core/Src/OLED.c **** 			OLED_ShowChar(Line, Column + i, SingleNumber - 10 + 'A');
 989              		.loc 1 296 4 is_stmt 1 view .LVU216
 990 0010 E119     		adds	r1, r4, r7
 991 0012 3732     		adds	r2, r2, #55
 992              	.LVL99:
 993              		.loc 1 296 4 is_stmt 0 view .LVU217
 994 0014 C9B2     		uxtb	r1, r1
 995 0016 4046     		mov	r0, r8
 996 0018 FFF7FEFF 		bl	OLED_ShowChar
 997              	.LVL100:
 998              	.L64:
 287:Core/Src/OLED.c **** 	for (i = 0; i < Length; i++)							
 999              		.loc 1 287 26 is_stmt 1 discriminator 2 view .LVU218
 287:Core/Src/OLED.c **** 	for (i = 0; i < Length; i++)							
 1000              		.loc 1 287 27 is_stmt 0 discriminator 2 view .LVU219
 1001 001c 0134     		adds	r4, r4, #1
 1002              	.LVL101:
 287:Core/Src/OLED.c **** 	for (i = 0; i < Length; i++)							
 1003              		.loc 1 287 27 discriminator 2 view .LVU220
 1004 001e E4B2     		uxtb	r4, r4
 1005              	.LVL102:
 1006              	.L62:
 287:Core/Src/OLED.c **** 	for (i = 0; i < Length; i++)							
 1007              		.loc 1 287 14 is_stmt 1 discriminator 1 view .LVU221
 287:Core/Src/OLED.c **** 	for (i = 0; i < Length; i++)							
 1008              		.loc 1 287 2 is_stmt 0 discriminator 1 view .LVU222
 1009 0020 AC42     		cmp	r4, r5
 1010 0022 11D2     		bcs	.L67
 289:Core/Src/OLED.c **** 		if (SingleNumber < 10)
 1011              		.loc 1 289 3 is_stmt 1 view .LVU223
 289:Core/Src/OLED.c **** 		if (SingleNumber < 10)
 1012              		.loc 1 289 47 is_stmt 0 view .LVU224
 1013 0024 291B     		subs	r1, r5, r4
 289:Core/Src/OLED.c **** 		if (SingleNumber < 10)
 1014              		.loc 1 289 27 view .LVU225
 1015 0026 0139     		subs	r1, r1, #1
 1016 0028 1020     		movs	r0, #16
 1017 002a FFF7FEFF 		bl	OLED_Pow
 1018              	.LVL103:
 289:Core/Src/OLED.c **** 		if (SingleNumber < 10)
 1019              		.loc 1 289 25 view .LVU226
 1020 002e B6FBF0F2 		udiv	r2, r6, r0
 289:Core/Src/OLED.c **** 		if (SingleNumber < 10)
 1021              		.loc 1 289 16 view .LVU227
 1022 0032 02F00F02 		and	r2, r2, #15
 1023              	.LVL104:
 290:Core/Src/OLED.c **** 		{
 1024              		.loc 1 290 3 is_stmt 1 view .LVU228
 290:Core/Src/OLED.c **** 		{
 1025              		.loc 1 290 6 is_stmt 0 view .LVU229
 1026 0036 092A     		cmp	r2, #9
 1027 0038 EAD8     		bhi	.L63
 292:Core/Src/OLED.c **** 		}
 1028              		.loc 1 292 4 is_stmt 1 view .LVU230
 1029 003a E119     		adds	r1, r4, r7
 1030 003c 3032     		adds	r2, r2, #48
 1031              	.LVL105:
ARM GAS  /tmp/ccTzMmp3.s 			page 25


 292:Core/Src/OLED.c **** 		}
 1032              		.loc 1 292 4 is_stmt 0 view .LVU231
 1033 003e C9B2     		uxtb	r1, r1
 1034 0040 4046     		mov	r0, r8
 1035 0042 FFF7FEFF 		bl	OLED_ShowChar
 1036              	.LVL106:
 292:Core/Src/OLED.c **** 		}
 1037              		.loc 1 292 4 view .LVU232
 1038 0046 E9E7     		b	.L64
 1039              	.L67:
 297:Core/Src/OLED.c **** 		}
 298:Core/Src/OLED.c **** 	}
 299:Core/Src/OLED.c **** }
 1040              		.loc 1 299 1 view .LVU233
 1041 0048 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 1042              		.loc 1 299 1 view .LVU234
 1043              		.cfi_endproc
 1044              	.LFE78:
 1046              		.section	.text.OLED_ShowBinNum,"ax",%progbits
 1047              		.align	1
 1048              		.global	OLED_ShowBinNum
 1049              		.syntax unified
 1050              		.thumb
 1051              		.thumb_func
 1052              		.fpu softvfp
 1054              	OLED_ShowBinNum:
 1055              	.LVL107:
 1056              	.LFB79:
 300:Core/Src/OLED.c **** 
 301:Core/Src/OLED.c **** /**
 302:Core/Src/OLED.c ****   * @brief  OLED显示数字（二进制，正数）
 303:Core/Src/OLED.c ****   * @param  Line 起始行位置，范围：1~4
 304:Core/Src/OLED.c ****   * @param  Column 起始列位置，范围：1~16
 305:Core/Src/OLED.c ****   * @param  Number 要显示的数字，范围：0~1111 1111 1111 1111
 306:Core/Src/OLED.c ****   * @param  Length 要显示数字的长度，范围：1~16
 307:Core/Src/OLED.c ****   * @retval 无
 308:Core/Src/OLED.c ****   */
 309:Core/Src/OLED.c **** void OLED_ShowBinNum(uint8_t Line, uint8_t Column, uint32_t Number, uint8_t Length)
 310:Core/Src/OLED.c **** {
 1057              		.loc 1 310 1 is_stmt 1 view -0
 1058              		.cfi_startproc
 1059              		@ args = 0, pretend = 0, frame = 0
 1060              		@ frame_needed = 0, uses_anonymous_args = 0
 1061              		.loc 1 310 1 is_stmt 0 view .LVU236
 1062 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 1063              	.LCFI15:
 1064              		.cfi_def_cfa_offset 32
 1065              		.cfi_offset 3, -32
 1066              		.cfi_offset 4, -28
 1067              		.cfi_offset 5, -24
 1068              		.cfi_offset 6, -20
 1069              		.cfi_offset 7, -16
 1070              		.cfi_offset 8, -12
 1071              		.cfi_offset 9, -8
 1072              		.cfi_offset 14, -4
 1073 0004 8146     		mov	r9, r0
 1074 0006 8846     		mov	r8, r1
ARM GAS  /tmp/ccTzMmp3.s 			page 26


 1075 0008 1746     		mov	r7, r2
 1076 000a 1E46     		mov	r6, r3
 311:Core/Src/OLED.c **** 	uint8_t i;
 1077              		.loc 1 311 2 is_stmt 1 view .LVU237
 312:Core/Src/OLED.c **** 	for (i = 0; i < Length; i++)							
 1078              		.loc 1 312 2 view .LVU238
 1079              	.LVL108:
 1080              		.loc 1 312 9 is_stmt 0 view .LVU239
 1081 000c 0024     		movs	r4, #0
 1082              		.loc 1 312 2 view .LVU240
 1083 000e 12E0     		b	.L69
 1084              	.LVL109:
 1085              	.L70:
 313:Core/Src/OLED.c **** 	{
 314:Core/Src/OLED.c **** 		OLED_ShowChar(Line, Column + i, Number / OLED_Pow(2, Length - i - 1) % 2 + '0');
 1086              		.loc 1 314 3 is_stmt 1 discriminator 3 view .LVU241
 1087 0010 04EB0805 		add	r5, r4, r8
 1088 0014 EDB2     		uxtb	r5, r5
 1089              		.loc 1 314 63 is_stmt 0 discriminator 3 view .LVU242
 1090 0016 311B     		subs	r1, r6, r4
 1091              		.loc 1 314 44 discriminator 3 view .LVU243
 1092 0018 0139     		subs	r1, r1, #1
 1093 001a 0220     		movs	r0, #2
 1094 001c FFF7FEFF 		bl	OLED_Pow
 1095              	.LVL110:
 1096              		.loc 1 314 42 discriminator 3 view .LVU244
 1097 0020 B7FBF0F2 		udiv	r2, r7, r0
 1098              		.loc 1 314 72 discriminator 3 view .LVU245
 1099 0024 02F00102 		and	r2, r2, #1
 1100              		.loc 1 314 3 discriminator 3 view .LVU246
 1101 0028 3032     		adds	r2, r2, #48
 1102 002a 2946     		mov	r1, r5
 1103 002c 4846     		mov	r0, r9
 1104 002e FFF7FEFF 		bl	OLED_ShowChar
 1105              	.LVL111:
 312:Core/Src/OLED.c **** 	for (i = 0; i < Length; i++)							
 1106              		.loc 1 312 26 is_stmt 1 discriminator 3 view .LVU247
 312:Core/Src/OLED.c **** 	for (i = 0; i < Length; i++)							
 1107              		.loc 1 312 27 is_stmt 0 discriminator 3 view .LVU248
 1108 0032 0134     		adds	r4, r4, #1
 1109              	.LVL112:
 312:Core/Src/OLED.c **** 	for (i = 0; i < Length; i++)							
 1110              		.loc 1 312 27 discriminator 3 view .LVU249
 1111 0034 E4B2     		uxtb	r4, r4
 1112              	.LVL113:
 1113              	.L69:
 312:Core/Src/OLED.c **** 	for (i = 0; i < Length; i++)							
 1114              		.loc 1 312 14 is_stmt 1 discriminator 1 view .LVU250
 312:Core/Src/OLED.c **** 	for (i = 0; i < Length; i++)							
 1115              		.loc 1 312 2 is_stmt 0 discriminator 1 view .LVU251
 1116 0036 B442     		cmp	r4, r6
 1117 0038 EAD3     		bcc	.L70
 315:Core/Src/OLED.c **** 	}
 316:Core/Src/OLED.c **** }
 1118              		.loc 1 316 1 view .LVU252
 1119 003a BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 1120              		.loc 1 316 1 view .LVU253
ARM GAS  /tmp/ccTzMmp3.s 			page 27


 1121              		.cfi_endproc
 1122              	.LFE79:
 1124              		.section	.text.OLED_Init,"ax",%progbits
 1125              		.align	1
 1126              		.global	OLED_Init
 1127              		.syntax unified
 1128              		.thumb
 1129              		.thumb_func
 1130              		.fpu softvfp
 1132              	OLED_Init:
 1133              	.LFB80:
 317:Core/Src/OLED.c **** 
 318:Core/Src/OLED.c **** /**
 319:Core/Src/OLED.c ****   * @brief  OLED初始化
 320:Core/Src/OLED.c ****   * @param  无
 321:Core/Src/OLED.c ****   * @retval 无
 322:Core/Src/OLED.c ****   */
 323:Core/Src/OLED.c **** void OLED_Init(void)
 324:Core/Src/OLED.c **** {
 1134              		.loc 1 324 1 is_stmt 1 view -0
 1135              		.cfi_startproc
 1136              		@ args = 0, pretend = 0, frame = 0
 1137              		@ frame_needed = 0, uses_anonymous_args = 0
 1138 0000 08B5     		push	{r3, lr}
 1139              	.LCFI16:
 1140              		.cfi_def_cfa_offset 8
 1141              		.cfi_offset 3, -8
 1142              		.cfi_offset 14, -4
 325:Core/Src/OLED.c **** 	uint32_t i, j;
 1143              		.loc 1 325 2 view .LVU255
 326:Core/Src/OLED.c **** 	
 327:Core/Src/OLED.c **** 	for (i = 0; i < 1000; i++)			//上电延时
 1144              		.loc 1 327 2 view .LVU256
 1145              	.LVL114:
 1146              		.loc 1 327 9 is_stmt 0 view .LVU257
 1147 0002 0022     		movs	r2, #0
 1148              		.loc 1 327 2 view .LVU258
 1149 0004 04E0     		b	.L73
 1150              	.LVL115:
 1151              	.L74:
 328:Core/Src/OLED.c **** 	{
 329:Core/Src/OLED.c **** 		for (j = 0; j < 1000; j++);
 1152              		.loc 1 329 29 is_stmt 1 discriminator 3 view .LVU259
 1153              		.loc 1 329 25 discriminator 3 view .LVU260
 1154              		.loc 1 329 26 is_stmt 0 discriminator 3 view .LVU261
 1155 0006 0133     		adds	r3, r3, #1
 1156              	.LVL116:
 1157              	.L75:
 1158              		.loc 1 329 15 is_stmt 1 discriminator 1 view .LVU262
 1159              		.loc 1 329 3 is_stmt 0 discriminator 1 view .LVU263
 1160 0008 B3F57A7F 		cmp	r3, #1000
 1161 000c FBD3     		bcc	.L74
 327:Core/Src/OLED.c **** 	{
 1162              		.loc 1 327 24 is_stmt 1 discriminator 2 view .LVU264
 327:Core/Src/OLED.c **** 	{
 1163              		.loc 1 327 25 is_stmt 0 discriminator 2 view .LVU265
 1164 000e 0132     		adds	r2, r2, #1
ARM GAS  /tmp/ccTzMmp3.s 			page 28


 1165              	.LVL117:
 1166              	.L73:
 327:Core/Src/OLED.c **** 	{
 1167              		.loc 1 327 14 is_stmt 1 discriminator 1 view .LVU266
 327:Core/Src/OLED.c **** 	{
 1168              		.loc 1 327 2 is_stmt 0 discriminator 1 view .LVU267
 1169 0010 B2F57A7F 		cmp	r2, #1000
 1170 0014 01D2     		bcs	.L78
 1171              		.loc 1 329 10 view .LVU268
 1172 0016 0023     		movs	r3, #0
 1173 0018 F6E7     		b	.L75
 1174              	.L78:
 330:Core/Src/OLED.c **** 	}
 331:Core/Src/OLED.c **** 	
 332:Core/Src/OLED.c **** 	OLED_I2C_Init();			//端口初始化
 1175              		.loc 1 332 2 is_stmt 1 view .LVU269
 1176 001a FFF7FEFF 		bl	OLED_I2C_Init
 1177              	.LVL118:
 333:Core/Src/OLED.c **** 	
 334:Core/Src/OLED.c **** 	OLED_WriteCommand(0xAE);	//关闭显示
 1178              		.loc 1 334 2 view .LVU270
 1179 001e AE20     		movs	r0, #174
 1180 0020 FFF7FEFF 		bl	OLED_WriteCommand
 1181              	.LVL119:
 335:Core/Src/OLED.c **** 	
 336:Core/Src/OLED.c **** 	OLED_WriteCommand(0xD5);	//设置显示时钟分频比/振荡器频率
 1182              		.loc 1 336 2 view .LVU271
 1183 0024 D520     		movs	r0, #213
 1184 0026 FFF7FEFF 		bl	OLED_WriteCommand
 1185              	.LVL120:
 337:Core/Src/OLED.c **** 	OLED_WriteCommand(0x80);
 1186              		.loc 1 337 2 view .LVU272
 1187 002a 8020     		movs	r0, #128
 1188 002c FFF7FEFF 		bl	OLED_WriteCommand
 1189              	.LVL121:
 338:Core/Src/OLED.c **** 	
 339:Core/Src/OLED.c **** 	OLED_WriteCommand(0xA8);	//设置多路复用率
 1190              		.loc 1 339 2 view .LVU273
 1191 0030 A820     		movs	r0, #168
 1192 0032 FFF7FEFF 		bl	OLED_WriteCommand
 1193              	.LVL122:
 340:Core/Src/OLED.c **** 	OLED_WriteCommand(0x3F);
 1194              		.loc 1 340 2 view .LVU274
 1195 0036 3F20     		movs	r0, #63
 1196 0038 FFF7FEFF 		bl	OLED_WriteCommand
 1197              	.LVL123:
 341:Core/Src/OLED.c **** 	
 342:Core/Src/OLED.c **** 	OLED_WriteCommand(0xD3);	//设置显示偏移
 1198              		.loc 1 342 2 view .LVU275
 1199 003c D320     		movs	r0, #211
 1200 003e FFF7FEFF 		bl	OLED_WriteCommand
 1201              	.LVL124:
 343:Core/Src/OLED.c **** 	OLED_WriteCommand(0x00);
 1202              		.loc 1 343 2 view .LVU276
 1203 0042 0020     		movs	r0, #0
 1204 0044 FFF7FEFF 		bl	OLED_WriteCommand
 1205              	.LVL125:
ARM GAS  /tmp/ccTzMmp3.s 			page 29


 344:Core/Src/OLED.c **** 	
 345:Core/Src/OLED.c **** 	OLED_WriteCommand(0x40);	//设置显示开始行
 1206              		.loc 1 345 2 view .LVU277
 1207 0048 4020     		movs	r0, #64
 1208 004a FFF7FEFF 		bl	OLED_WriteCommand
 1209              	.LVL126:
 346:Core/Src/OLED.c **** 	
 347:Core/Src/OLED.c **** 	OLED_WriteCommand(0xA1);	//设置左右方向，0xA1正常 0xA0左右反置
 1210              		.loc 1 347 2 view .LVU278
 1211 004e A120     		movs	r0, #161
 1212 0050 FFF7FEFF 		bl	OLED_WriteCommand
 1213              	.LVL127:
 348:Core/Src/OLED.c **** 	
 349:Core/Src/OLED.c **** 	OLED_WriteCommand(0xC8);	//设置上下方向，0xC8正常 0xC0上下反置
 1214              		.loc 1 349 2 view .LVU279
 1215 0054 C820     		movs	r0, #200
 1216 0056 FFF7FEFF 		bl	OLED_WriteCommand
 1217              	.LVL128:
 350:Core/Src/OLED.c **** 
 351:Core/Src/OLED.c **** 	OLED_WriteCommand(0xDA);	//设置COM引脚硬件配置
 1218              		.loc 1 351 2 view .LVU280
 1219 005a DA20     		movs	r0, #218
 1220 005c FFF7FEFF 		bl	OLED_WriteCommand
 1221              	.LVL129:
 352:Core/Src/OLED.c **** 	OLED_WriteCommand(0x12);
 1222              		.loc 1 352 2 view .LVU281
 1223 0060 1220     		movs	r0, #18
 1224 0062 FFF7FEFF 		bl	OLED_WriteCommand
 1225              	.LVL130:
 353:Core/Src/OLED.c **** 	
 354:Core/Src/OLED.c **** 	OLED_WriteCommand(0x81);	//设置对比度控制
 1226              		.loc 1 354 2 view .LVU282
 1227 0066 8120     		movs	r0, #129
 1228 0068 FFF7FEFF 		bl	OLED_WriteCommand
 1229              	.LVL131:
 355:Core/Src/OLED.c **** 	OLED_WriteCommand(0xCF);
 1230              		.loc 1 355 2 view .LVU283
 1231 006c CF20     		movs	r0, #207
 1232 006e FFF7FEFF 		bl	OLED_WriteCommand
 1233              	.LVL132:
 356:Core/Src/OLED.c **** 
 357:Core/Src/OLED.c **** 	OLED_WriteCommand(0xD9);	//设置预充电周期
 1234              		.loc 1 357 2 view .LVU284
 1235 0072 D920     		movs	r0, #217
 1236 0074 FFF7FEFF 		bl	OLED_WriteCommand
 1237              	.LVL133:
 358:Core/Src/OLED.c **** 	OLED_WriteCommand(0xF1);
 1238              		.loc 1 358 2 view .LVU285
 1239 0078 F120     		movs	r0, #241
 1240 007a FFF7FEFF 		bl	OLED_WriteCommand
 1241              	.LVL134:
 359:Core/Src/OLED.c **** 
 360:Core/Src/OLED.c **** 	OLED_WriteCommand(0xDB);	//设置VCOMH取消选择级别
 1242              		.loc 1 360 2 view .LVU286
 1243 007e DB20     		movs	r0, #219
 1244 0080 FFF7FEFF 		bl	OLED_WriteCommand
 1245              	.LVL135:
ARM GAS  /tmp/ccTzMmp3.s 			page 30


 361:Core/Src/OLED.c **** 	OLED_WriteCommand(0x30);
 1246              		.loc 1 361 2 view .LVU287
 1247 0084 3020     		movs	r0, #48
 1248 0086 FFF7FEFF 		bl	OLED_WriteCommand
 1249              	.LVL136:
 362:Core/Src/OLED.c **** 
 363:Core/Src/OLED.c **** 	OLED_WriteCommand(0xA4);	//设置整个显示打开/关闭
 1250              		.loc 1 363 2 view .LVU288
 1251 008a A420     		movs	r0, #164
 1252 008c FFF7FEFF 		bl	OLED_WriteCommand
 1253              	.LVL137:
 364:Core/Src/OLED.c **** 
 365:Core/Src/OLED.c **** 	OLED_WriteCommand(0xA6);	//设置正常/倒转显示
 1254              		.loc 1 365 2 view .LVU289
 1255 0090 A620     		movs	r0, #166
 1256 0092 FFF7FEFF 		bl	OLED_WriteCommand
 1257              	.LVL138:
 366:Core/Src/OLED.c **** 
 367:Core/Src/OLED.c **** 	OLED_WriteCommand(0x8D);	//设置充电泵
 1258              		.loc 1 367 2 view .LVU290
 1259 0096 8D20     		movs	r0, #141
 1260 0098 FFF7FEFF 		bl	OLED_WriteCommand
 1261              	.LVL139:
 368:Core/Src/OLED.c **** 	OLED_WriteCommand(0x14);
 1262              		.loc 1 368 2 view .LVU291
 1263 009c 1420     		movs	r0, #20
 1264 009e FFF7FEFF 		bl	OLED_WriteCommand
 1265              	.LVL140:
 369:Core/Src/OLED.c **** 
 370:Core/Src/OLED.c **** 	OLED_WriteCommand(0xAF);	//开启显示
 1266              		.loc 1 370 2 view .LVU292
 1267 00a2 AF20     		movs	r0, #175
 1268 00a4 FFF7FEFF 		bl	OLED_WriteCommand
 1269              	.LVL141:
 371:Core/Src/OLED.c **** 		
 372:Core/Src/OLED.c **** 	OLED_Clear();				//OLED清屏
 1270              		.loc 1 372 2 view .LVU293
 1271 00a8 FFF7FEFF 		bl	OLED_Clear
 1272              	.LVL142:
 373:Core/Src/OLED.c **** }
 1273              		.loc 1 373 1 is_stmt 0 view .LVU294
 1274 00ac 08BD     		pop	{r3, pc}
 1275              		.cfi_endproc
 1276              	.LFE80:
 1278              		.global	OLED_F8x16
 1279              		.section	.rodata.OLED_F8x16,"a"
 1280              		.align	2
 1281              		.set	.LANCHOR0,. + 0
 1284              	OLED_F8x16:
 1285 0000 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 1285      00000000 
 1285      00000000 
 1285      00
 1286 000d 000000   		.ascii	"\000\000\000"
 1287 0010 000000F8 		.ascii	"\000\000\000\370\000\000\000\000\000\000\00030\000\000"
 1287      00000000 
 1287      00000033 
ARM GAS  /tmp/ccTzMmp3.s 			page 31


 1287      300000
 1288 001f 00       		.ascii	"\000"
 1289 0020 00100C06 		.ascii	"\000\020\014\006\020\014\006\000\000\000\000\000\000"
 1289      100C0600 
 1289      00000000 
 1289      00
 1290 002d 000000   		.ascii	"\000\000\000"
 1291 0030 40C07840 		.ascii	"@\300x@\300x@\000\004?\004\004?\004\004\000"
 1291      C0784000 
 1291      043F0404 
 1291      3F040400 
 1292 0040 007088FC 		.ascii	"\000p\210\374\0100\000\000\000\030 \377!\036\000\000"
 1292      08300000 
 1292      001820FF 
 1292      211E0000 
 1293 0050 F008F000 		.ascii	"\360\010\360\000\340\030\000\000\000!\034\003\036!\036"
 1293      E0180000 
 1293      00211C03 
 1293      1E211E
 1294 005f 00       		.ascii	"\000"
 1295 0060 00F00888 		.ascii	"\000\360\010\210p\000\000\000\036!#$\031'!\020"
 1295      70000000 
 1295      1E212324 
 1295      19272110 
 1296 0070 10160E00 		.ascii	"\020\026\016\000\000\000\000\000\000\000\000\000\000"
 1296      00000000 
 1296      00000000 
 1296      00
 1297 007d 000000   		.ascii	"\000\000\000"
 1298 0080 000000E0 		.ascii	"\000\000\000\340\030\004\002\000\000\000\000\007\030"
 1298      18040200 
 1298      00000007 
 1298      18
 1299 008d 204000   		.ascii	" @\000"
 1300 0090 00020418 		.ascii	"\000\002\004\030\340\000\000\000\000@ \030\007\000\000"
 1300      E0000000 
 1300      00402018 
 1300      070000
 1301 009f 00       		.ascii	"\000"
 1302 00a0 404080F0 		.ascii	"@@\200\360\200@@\000\002\002\001\017\001\002\002\000"
 1302      80404000 
 1302      0202010F 
 1302      01020200 
 1303 00b0 000000F0 		.ascii	"\000\000\000\360\000\000\000\000\001\001\001\037\001"
 1303      00000000 
 1303      0101011F 
 1303      01
 1304 00bd 010100   		.ascii	"\001\001\000"
 1305 00c0 00000000 		.ascii	"\000\000\000\000\000\000\000\000\200\260p\000\000\000"
 1305      00000000 
 1305      80B07000 
 1305      0000
 1306 00ce 0000     		.ascii	"\000\000"
 1307 00d0 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\001\001\001\001"
 1307      00000000 
 1307      00010101 
 1307      01
ARM GAS  /tmp/ccTzMmp3.s 			page 32


 1308 00dd 010101   		.ascii	"\001\001\001"
 1309 00e0 00000000 		.ascii	"\000\000\000\000\000\000\000\000\00000\000\000\000\000"
 1309      00000000 
 1309      00303000 
 1309      000000
 1310 00ef 00       		.ascii	"\000"
 1311 00f0 00000000 		.ascii	"\000\000\000\000\200`\030\004\000`\030\006\001\000\000"
 1311      80601804 
 1311      00601806 
 1311      010000
 1312 00ff 00       		.ascii	"\000"
 1313 0100 00E01008 		.ascii	"\000\340\020\010\010\020\340\000\000\017\020  \020\017"
 1313      0810E000 
 1313      000F1020 
 1313      20100F
 1314 010f 00       		.ascii	"\000"
 1315 0110 001010F8 		.ascii	"\000\020\020\370\000\000\000\000\000  ?  \000\000"
 1315      00000000 
 1315      0020203F 
 1315      20200000 
 1316 0120 00700808 		.ascii	"\000p\010\010\010\210p\000\0000($\"!0\000"
 1316      08887000 
 1316      00302824 
 1316      22213000 
 1317 0130 00300888 		.ascii	"\0000\010\210\210H0\000\000\030   \021\016\000"
 1317      88483000 
 1317      00182020 
 1317      20110E00 
 1318 0140 0000C020 		.ascii	"\000\000\300 \020\370\000\000\000\007\004$$?$\000"
 1318      10F80000 
 1318      00070424 
 1318      243F2400 
 1319 0150 00F80888 		.ascii	"\000\370\010\210\210\010\010\000\000\031!  \021\016"
 1319      88080800 
 1319      00192120 
 1319      20110E
 1320 015f 00       		.ascii	"\000"
 1321 0160 00E01088 		.ascii	"\000\340\020\210\210\030\000\000\000\017\021  \021\016"
 1321      88180000 
 1321      000F1120 
 1321      20110E
 1322 016f 00       		.ascii	"\000"
 1323 0170 00380808 		.ascii	"\0008\010\010\3108\010\000\000\000\000?\000\000\000"
 1323      C8380800 
 1323      0000003F 
 1323      000000
 1324 017f 00       		.ascii	"\000"
 1325 0180 00708808 		.ascii	"\000p\210\010\010\210p\000\000\034\"!!\"\034\000"
 1325      08887000 
 1325      001C2221 
 1325      21221C00 
 1326 0190 00E01008 		.ascii	"\000\340\020\010\010\020\340\000\000\0001\"\"\021\017"
 1326      0810E000 
 1326      00003122 
 1326      22110F
 1327 019f 00       		.ascii	"\000"
 1328 01a0 000000C0 		.ascii	"\000\000\000\300\300\000\000\000\000\000\00000\000\000"
ARM GAS  /tmp/ccTzMmp3.s 			page 33


 1328      C0000000 
 1328      00000030 
 1328      300000
 1329 01af 00       		.ascii	"\000"
 1330 01b0 00000080 		.ascii	"\000\000\000\200\000\000\000\000\000\000\200`\000\000"
 1330      00000000 
 1330      00008060 
 1330      0000
 1331 01be 0000     		.ascii	"\000\000"
 1332 01c0 00008040 		.ascii	"\000\000\200@ \020\010\000\000\001\002\004\010\020 "
 1332      20100800 
 1332      00010204 
 1332      081020
 1333 01cf 00       		.ascii	"\000"
 1334 01d0 40404040 		.ascii	"@@@@@@@\000\004\004\004\004\004\004\004\000"
 1334      40404000 
 1334      04040404 
 1334      04040400 
 1335 01e0 00081020 		.ascii	"\000\010\020 @\200\000\000\000 \020\010\004\002\001"
 1335      40800000 
 1335      00201008 
 1335      040201
 1336 01ef 00       		.ascii	"\000"
 1337 01f0 00704808 		.ascii	"\000pH\010\010\010\360\000\000\000\00006\001\000\000"
 1337      0808F000 
 1337      00000030 
 1337      36010000 
 1338 0200 C030C828 		.ascii	"\3000\310(\350\020\340\000\007\030'$#\024\013\000"
 1338      E810E000 
 1338      07182724 
 1338      23140B00 
 1339 0210 0000C038 		.ascii	"\000\000\3008\340\000\000\000 <#\002\002'8 "
 1339      E0000000 
 1339      203C2302 
 1339      02273820 
 1340 0220 08F88888 		.ascii	"\010\370\210\210\210p\000\000 ?   \021\016\000"
 1340      88700000 
 1340      203F2020 
 1340      20110E00 
 1341 0230 C0300808 		.ascii	"\3000\010\010\010\0108\000\007\030   \020\010\000"
 1341      08083800 
 1341      07182020 
 1341      20100800 
 1342 0240 08F80808 		.ascii	"\010\370\010\010\010\020\340\000 ?   \020\017\000"
 1342      0810E000 
 1342      203F2020 
 1342      20100F00 
 1343 0250 08F88888 		.ascii	"\010\370\210\210\350\010\020\000 ?  # \030\000"
 1343      E8081000 
 1343      203F2020 
 1343      23201800 
 1344 0260 08F88888 		.ascii	"\010\370\210\210\350\010\020\000 ? \000\003\000\000"
 1344      E8081000 
 1344      203F2000 
 1344      030000
 1345 026f 00       		.ascii	"\000"
 1346 0270 C0300808 		.ascii	"\3000\010\010\0108\000\000\007\030  \"\036\002\000"
ARM GAS  /tmp/ccTzMmp3.s 			page 34


 1346      08380000 
 1346      07182020 
 1346      221E0200 
 1347 0280 08F80800 		.ascii	"\010\370\010\000\000\010\370\010 ?!\001\001!? "
 1347      0008F808 
 1347      203F2101 
 1347      01213F20 
 1348 0290 000808F8 		.ascii	"\000\010\010\370\010\010\000\000\000  ?  \000\000"
 1348      08080000 
 1348      0020203F 
 1348      20200000 
 1349 02a0 00000808 		.ascii	"\000\000\010\010\370\010\010\000\300\200\200\200\177"
 1349      F8080800 
 1349      C0808080 
 1349      7F
 1350 02ad 000000   		.ascii	"\000\000\000"
 1351 02b0 08F888C0 		.ascii	"\010\370\210\300(\030\010\000 ? \001&8 \000"
 1351      28180800 
 1351      203F2001 
 1351      26382000 
 1352 02c0 08F80800 		.ascii	"\010\370\010\000\000\000\000\000 ?    0\000"
 1352      00000000 
 1352      203F2020 
 1352      20203000 
 1353 02d0 08F8F800 		.ascii	"\010\370\370\000\370\370\010\000 ?\000?\000? \000"
 1353      F8F80800 
 1353      203F003F 
 1353      003F2000 
 1354 02e0 08F830C0 		.ascii	"\010\3700\300\000\010\370\010 ? \000\007\030?\000"
 1354      0008F808 
 1354      203F2000 
 1354      07183F00 
 1355 02f0 E0100808 		.ascii	"\340\020\010\010\010\020\340\000\017\020   \020\017"
 1355      0810E000 
 1355      0F102020 
 1355      20100F
 1356 02ff 00       		.ascii	"\000"
 1357 0300 08F80808 		.ascii	"\010\370\010\010\010\010\360\000 ?!\001\001\001\000"
 1357      0808F000 
 1357      203F2101 
 1357      010100
 1358 030f 00       		.ascii	"\000"
 1359 0310 E0100808 		.ascii	"\340\020\010\010\010\020\340\000\017\030$$8PO\000"
 1359      0810E000 
 1359      0F182424 
 1359      38504F00 
 1360 0320 08F88888 		.ascii	"\010\370\210\210\210\210p\000 ? \000\003\0140 "
 1360      88887000 
 1360      203F2000 
 1360      030C3020 
 1361 0330 00708808 		.ascii	"\000p\210\010\010\0108\000\0008 !!\"\034\000"
 1361      08083800 
 1361      00382021 
 1361      21221C00 
 1362 0340 180808F8 		.ascii	"\030\010\010\370\010\010\030\000\000\000 ? \000\000"
 1362      08081800 
 1362      0000203F 
ARM GAS  /tmp/ccTzMmp3.s 			page 35


 1362      200000
 1363 034f 00       		.ascii	"\000"
 1364 0350 08F80800 		.ascii	"\010\370\010\000\000\010\370\010\000\037    \037\000"
 1364      0008F808 
 1364      001F2020 
 1364      20201F00 
 1365 0360 08788800 		.ascii	"\010x\210\000\000\3108\010\000\000\0078\016\001\000"
 1365      00C83808 
 1365      00000738 
 1365      0E0100
 1366 036f 00       		.ascii	"\000"
 1367 0370 F80800F8 		.ascii	"\370\010\000\370\000\010\370\000\003<\007\000\007<\003"
 1367      0008F800 
 1367      033C0700 
 1367      073C03
 1368 037f 00       		.ascii	"\000"
 1369 0380 08186880 		.ascii	"\010\030h\200\200h\030\010 0,\003\003,0 "
 1369      80681808 
 1369      20302C03 
 1369      032C3020 
 1370 0390 0838C800 		.ascii	"\0108\310\000\3108\010\000\000\000 ? \000\000\000"
 1370      C8380800 
 1370      0000203F 
 1370      20000000 
 1371 03a0 10080808 		.ascii	"\020\010\010\010\3108\010\000 8&!  \030\000"
 1371      C8380800 
 1371      20382621 
 1371      20201800 
 1372 03b0 000000FE 		.ascii	"\000\000\000\376\002\002\002\000\000\000\000\177@@@"
 1372      02020200 
 1372      0000007F 
 1372      404040
 1373 03bf 00       		.ascii	"\000"
 1374 03c0 000C30C0 		.ascii	"\000\0140\300\000\000\000\000\000\000\000\001\0068\300"
 1374      00000000 
 1374      00000001 
 1374      0638C0
 1375 03cf 00       		.ascii	"\000"
 1376 03d0 00020202 		.ascii	"\000\002\002\002\376\000\000\000\000@@@\177\000\000"
 1376      FE000000 
 1376      00404040 
 1376      7F0000
 1377 03df 00       		.ascii	"\000"
 1378 03e0 00000402 		.ascii	"\000\000\004\002\002\002\004\000\000\000\000\000\000"
 1378      02020400 
 1378      00000000 
 1378      00
 1379 03ed 000000   		.ascii	"\000\000\000"
 1380 03f0 00000000 		.ascii	"\000\000\000\000\000\000\000\000\200\200\200\200\200"
 1380      00000000 
 1380      80808080 
 1380      80
 1381 03fd 808080   		.ascii	"\200\200\200"
 1382 0400 00020204 		.ascii	"\000\002\002\004\000\000\000\000\000\000\000\000\000"
 1382      00000000 
 1382      00000000 
 1382      00
ARM GAS  /tmp/ccTzMmp3.s 			page 36


 1383 040d 000000   		.ascii	"\000\000\000"
 1384 0410 00008080 		.ascii	"\000\000\200\200\200\200\000\000\000\031$\"\"\"? "
 1384      80800000 
 1384      00192422 
 1384      22223F20 
 1385 0420 08F80080 		.ascii	"\010\370\000\200\200\000\000\000\000?\021  \021\016"
 1385      80000000 
 1385      003F1120 
 1385      20110E
 1386 042f 00       		.ascii	"\000"
 1387 0430 00000080 		.ascii	"\000\000\000\200\200\200\000\000\000\016\021   \021"
 1387      80800000 
 1387      000E1120 
 1387      202011
 1388 043f 00       		.ascii	"\000"
 1389 0440 00000080 		.ascii	"\000\000\000\200\200\210\370\000\000\016\021  \020?"
 1389      8088F800 
 1389      000E1120 
 1389      20103F
 1390 044f 20       		.ascii	" "
 1391 0450 00008080 		.ascii	"\000\000\200\200\200\200\000\000\000\037\"\"\"\"\023"
 1391      80800000 
 1391      001F2222 
 1391      222213
 1392 045f 00       		.ascii	"\000"
 1393 0460 008080F0 		.ascii	"\000\200\200\360\210\210\210\030\000  ?  \000\000"
 1393      88888818 
 1393      0020203F 
 1393      20200000 
 1394 0470 00008080 		.ascii	"\000\000\200\200\200\200\200\000\000k\224\224\224\223"
 1394      80808000 
 1394      006B9494 
 1394      9493
 1395 047e 6000     		.ascii	"`\000"
 1396 0480 08F80080 		.ascii	"\010\370\000\200\200\200\000\000 ?!\000\000 ? "
 1396      80800000 
 1396      203F2100 
 1396      00203F20 
 1397 0490 00809898 		.ascii	"\000\200\230\230\000\000\000\000\000  ?  \000\000"
 1397      00000000 
 1397      0020203F 
 1397      20200000 
 1398 04a0 00000080 		.ascii	"\000\000\000\200\230\230\000\000\000\300\200\200\200"
 1398      98980000 
 1398      00C08080 
 1398      80
 1399 04ad 7F0000   		.ascii	"\177\000\000"
 1400 04b0 08F80000 		.ascii	"\010\370\000\000\200\200\200\000 ?$\002-0 \000"
 1400      80808000 
 1400      203F2402 
 1400      2D302000 
 1401 04c0 000808F8 		.ascii	"\000\010\010\370\000\000\000\000\000  ?  \000\000"
 1401      00000000 
 1401      0020203F 
 1401      20200000 
 1402 04d0 80808080 		.ascii	"\200\200\200\200\200\200\200\000 ? \000? \000?"
 1402      80808000 
ARM GAS  /tmp/ccTzMmp3.s 			page 37


 1402      203F2000 
 1402      3F20003F 
 1403 04e0 80800080 		.ascii	"\200\200\000\200\200\200\000\000 ?!\000\000 ? "
 1403      80800000 
 1403      203F2100 
 1403      00203F20 
 1404 04f0 00008080 		.ascii	"\000\000\200\200\200\200\000\000\000\037    \037\000"
 1404      80800000 
 1404      001F2020 
 1404      20201F00 
 1405 0500 80800080 		.ascii	"\200\200\000\200\200\000\000\000\200\377\241  \021\016"
 1405      80000000 
 1405      80FFA120 
 1405      20110E
 1406 050f 00       		.ascii	"\000"
 1407 0510 00000080 		.ascii	"\000\000\000\200\200\200\200\000\000\016\021  \240\377"
 1407      80808000 
 1407      000E1120 
 1407      20A0FF
 1408 051f 80       		.ascii	"\200"
 1409 0520 80808000 		.ascii	"\200\200\200\000\200\200\200\000  ?! \000\001\000"
 1409      80808000 
 1409      20203F21 
 1409      20000100 
 1410 0530 00008080 		.ascii	"\000\000\200\200\200\200\200\000\0003$$$$\031\000"
 1410      80808000 
 1410      00332424 
 1410      24241900 
 1411 0540 008080E0 		.ascii	"\000\200\200\340\200\200\000\000\000\000\000\037  \000"
 1411      80800000 
 1411      0000001F 
 1411      202000
 1412 054f 00       		.ascii	"\000"
 1413 0550 80800000 		.ascii	"\200\200\000\000\000\200\200\000\000\037   \020? "
 1413      00808000 
 1413      001F2020 
 1413      20103F20 
 1414 0560 80808000 		.ascii	"\200\200\200\000\000\200\200\200\000\001\0160\010\006"
 1414      00808080 
 1414      00010E30 
 1414      0806
 1415 056e 0100     		.ascii	"\001\000"
 1416 0570 80800080 		.ascii	"\200\200\000\200\000\200\200\200\0170\014\003\0140\017"
 1416      00808080 
 1416      0F300C03 
 1416      0C300F
 1417 057f 00       		.ascii	"\000"
 1418 0580 00808000 		.ascii	"\000\200\200\000\200\200\200\000\000 1.\0161 \000"
 1418      80808000 
 1418      0020312E 
 1418      0E312000 
 1419 0590 80808000 		.ascii	"\200\200\200\000\000\200\200\200\200\201\216p\030\006"
 1419      00808080 
 1419      80818E70 
 1419      1806
 1420 059e 0100     		.ascii	"\001\000"
 1421 05a0 00808080 		.ascii	"\000\200\200\200\200\200\200\000\000!0,\"!0\000"
ARM GAS  /tmp/ccTzMmp3.s 			page 38


 1421      80808000 
 1421      0021302C 
 1421      22213000 
 1422 05b0 00000000 		.ascii	"\000\000\000\000\200|\002\002\000\000\000\000\000?@"
 1422      807C0202 
 1422      00000000 
 1422      003F40
 1423 05bf 40       		.ascii	"@"
 1424 05c0 00000000 		.ascii	"\000\000\000\000\377\000\000\000\000\000\000\000\377"
 1424      FF000000 
 1424      00000000 
 1424      FF
 1425 05cd 000000   		.ascii	"\000\000\000"
 1426 05d0 0002027C 		.ascii	"\000\002\002|\200\000\000\000\000@@?\000\000\000\000"
 1426      80000000 
 1426      0040403F 
 1426      00000000 
 1427 05e0 00060101 		.ascii	"\000\006\001\001\002\002\004\004\000\000\000\000\000"
 1427      02020404 
 1427      00000000 
 1427      00
 1428 05ed 000000   		.ascii	"\000\000\000"
 1429              		.text
 1430              	.Letext0:
 1431              		.file 2 "/usr/lib/gcc/arm-none-eabi/10.3.1/include/stdint.h"
 1432              		.file 3 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f103xb.h"
 1433              		.file 4 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_gpio.h"
 1434              		.file 5 "Core/Inc/OLED_Font.h"
ARM GAS  /tmp/ccTzMmp3.s 			page 39


DEFINED SYMBOLS
                            *ABS*:0000000000000000 OLED.c
     /tmp/ccTzMmp3.s:16     .text.OLED_I2C_Init:0000000000000000 $t
     /tmp/ccTzMmp3.s:24     .text.OLED_I2C_Init:0000000000000000 OLED_I2C_Init
     /tmp/ccTzMmp3.s:115    .text.OLED_I2C_Init:0000000000000068 $d
     /tmp/ccTzMmp3.s:120    .text.OLED_I2C_Start:0000000000000000 $t
     /tmp/ccTzMmp3.s:127    .text.OLED_I2C_Start:0000000000000000 OLED_I2C_Start
     /tmp/ccTzMmp3.s:168    .text.OLED_I2C_Start:0000000000000038 $d
     /tmp/ccTzMmp3.s:173    .text.OLED_I2C_Stop:0000000000000000 $t
     /tmp/ccTzMmp3.s:180    .text.OLED_I2C_Stop:0000000000000000 OLED_I2C_Stop
     /tmp/ccTzMmp3.s:215    .text.OLED_I2C_Stop:000000000000002c $d
     /tmp/ccTzMmp3.s:220    .text.OLED_I2C_SendByte:0000000000000000 $t
     /tmp/ccTzMmp3.s:227    .text.OLED_I2C_SendByte:0000000000000000 OLED_I2C_SendByte
     /tmp/ccTzMmp3.s:305    .text.OLED_I2C_SendByte:0000000000000058 $d
     /tmp/ccTzMmp3.s:310    .text.OLED_WriteCommand:0000000000000000 $t
     /tmp/ccTzMmp3.s:317    .text.OLED_WriteCommand:0000000000000000 OLED_WriteCommand
     /tmp/ccTzMmp3.s:355    .text.OLED_WriteData:0000000000000000 $t
     /tmp/ccTzMmp3.s:362    .text.OLED_WriteData:0000000000000000 OLED_WriteData
     /tmp/ccTzMmp3.s:400    .text.OLED_SetCursor:0000000000000000 $t
     /tmp/ccTzMmp3.s:407    .text.OLED_SetCursor:0000000000000000 OLED_SetCursor
     /tmp/ccTzMmp3.s:444    .text.OLED_Clear:0000000000000000 $t
     /tmp/ccTzMmp3.s:451    .text.OLED_Clear:0000000000000000 OLED_Clear
     /tmp/ccTzMmp3.s:520    .text.OLED_ShowChar:0000000000000000 $t
     /tmp/ccTzMmp3.s:527    .text.OLED_ShowChar:0000000000000000 OLED_ShowChar
     /tmp/ccTzMmp3.s:632    .text.OLED_ShowChar:0000000000000060 $d
     /tmp/ccTzMmp3.s:637    .text.OLED_ShowString:0000000000000000 $t
     /tmp/ccTzMmp3.s:644    .text.OLED_ShowString:0000000000000000 OLED_ShowString
     /tmp/ccTzMmp3.s:700    .text.OLED_Pow:0000000000000000 $t
     /tmp/ccTzMmp3.s:707    .text.OLED_Pow:0000000000000000 OLED_Pow
     /tmp/ccTzMmp3.s:749    .text.OLED_ShowNum:0000000000000000 $t
     /tmp/ccTzMmp3.s:756    .text.OLED_ShowNum:0000000000000000 OLED_ShowNum
     /tmp/ccTzMmp3.s:832    .text.OLED_ShowNum:000000000000004c $d
     /tmp/ccTzMmp3.s:837    .text.OLED_ShowSignedNum:0000000000000000 $t
     /tmp/ccTzMmp3.s:844    .text.OLED_ShowSignedNum:0000000000000000 OLED_ShowSignedNum
     /tmp/ccTzMmp3.s:947    .text.OLED_ShowSignedNum:0000000000000060 $d
     /tmp/ccTzMmp3.s:952    .text.OLED_ShowHexNum:0000000000000000 $t
     /tmp/ccTzMmp3.s:959    .text.OLED_ShowHexNum:0000000000000000 OLED_ShowHexNum
     /tmp/ccTzMmp3.s:1047   .text.OLED_ShowBinNum:0000000000000000 $t
     /tmp/ccTzMmp3.s:1054   .text.OLED_ShowBinNum:0000000000000000 OLED_ShowBinNum
     /tmp/ccTzMmp3.s:1125   .text.OLED_Init:0000000000000000 $t
     /tmp/ccTzMmp3.s:1132   .text.OLED_Init:0000000000000000 OLED_Init
     /tmp/ccTzMmp3.s:1284   .rodata.OLED_F8x16:0000000000000000 OLED_F8x16
     /tmp/ccTzMmp3.s:1280   .rodata.OLED_F8x16:0000000000000000 $d

UNDEFINED SYMBOLS
HAL_GPIO_Init
HAL_GPIO_WritePin
